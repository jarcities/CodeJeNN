#pragma once
#include <iostream>
#include <array>
#include <random>
#include <cmath>
#include <functional>
#include <stdexcept>

template<typename Scalar>
using activationFunction = void(*)(Scalar&, Scalar, Scalar);


//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 


template <typename Scalar, int channels, int height, int width>
void BatchNormalization2D(Scalar *outputs, const Scalar *inputs,
                          const Scalar *gamma, const Scalar *beta,
                          const Scalar *mean, const Scalar *variance,
                          Scalar epsilon) noexcept
{
    for (int c = 0; c < channels; ++c)
    {
        for (int i = 0; i < height * width; ++i)
        {
            int idx = i * channels + c;
            outputs[idx] = gamma[c] * ((inputs[idx] - mean[c]) / std::sqrt(variance[c] + epsilon)) +
                           beta[c];
        }
    }
}

template<typename Scalar, int output_size>
void Dense(Scalar* outputs, const Scalar* inputs, const Scalar* weights, const Scalar* biases, int input_size, activationFunction<Scalar> activation_function, Scalar alpha) noexcept {
    for(int i = 0; i < output_size; ++i){
        Scalar sum = 0;
        for(int j = 0; j < input_size; ++j){
            sum += inputs[j] * weights[j * output_size + i];
        }
        sum += biases[i];
        activation_function(outputs[i], sum, alpha);
    }
}

template <typename Scalar, int out_size>
void Conv1D(Scalar *outputs, const Scalar *inputs, const Scalar *weights, const Scalar *biases,
                   int in_size, int kernel_size, int stride, int pad,
                   activationFunction<Scalar> activation_function, Scalar alpha) noexcept
{
    for (int o = 0; o < out_size; ++o)
    {
        Scalar sum = 0;
        for (int k = 0; k < kernel_size; ++k)
        {
            int in_index = o * stride - pad + k;
            if (in_index >= 0 && in_index < in_size)
            {
                int weight_index = k * out_size + o;
                sum += inputs[in_index] * weights[weight_index];
            }
        }
        sum += biases[o];
        activation_function(outputs[o], sum, alpha);
    }
}

template <typename Scalar, int out_channels, int out_height, int out_width>
void Conv2D(Scalar *outputs, const Scalar *inputs, const Scalar *weights, const Scalar *biases,
                   int in_channels, int in_height, int in_width,
                   int kernel_h, int kernel_w, int stride_h, int stride_w,
                   int pad_h, int pad_w,
                   activationFunction<Scalar> activation_function, Scalar alpha) noexcept
{
    for (int oc = 0; oc < out_channels; ++oc)
    {
        for (int oh = 0; oh < out_height; ++oh)
        {
            for (int ow = 0; ow < out_width; ++ow)
            {
                Scalar sum = 0;
                for (int ic = 0; ic < in_channels; ++ic)
                {
                    for (int kh = 0; kh < kernel_h; ++kh)
                    {
                        for (int kw = 0; kw < kernel_w; ++kw)
                        {
                            int in_h = oh * stride_h - pad_h + kh;
                            int in_w = ow * stride_w - pad_w + kw;
                            if (in_h >= 0 && in_h < in_height && in_w >= 0 && in_w < in_width)
                            {
                                int input_index = (in_h * in_width * in_channels) + (in_w * in_channels) + ic;
                                int weight_index = (((kh * kernel_w + kw) * in_channels + ic) * out_channels) + oc;
                                sum += inputs[input_index] * weights[weight_index];
                            }
                        }
                    }
                }
                sum += biases[oc];
                activation_function(outputs[(oh * out_width * out_channels) + (ow * out_channels) + oc], sum, alpha);
            }
        }
    }
}

template <typename Scalar, int out_channels, int out_depth, int out_height, int out_width>
void Conv3D(Scalar *outputs, const Scalar *inputs, const Scalar *weights, const Scalar *biases,
                   int in_channels, int in_depth, int in_height, int in_width,
                   int kernel_d, int kernel_h, int kernel_w, int stride_d, int stride_h, int stride_w,
                   int pad_d, int pad_h, int pad_w,
                   activationFunction<Scalar> activation_function, Scalar alpha) noexcept
{
    // Simplified 3D convolution implementation
    for (int oc = 0; oc < out_channels; ++oc)
    {
        for (int od = 0; od < out_depth; ++od)
        {
            for (int oh = 0; oh < out_height; ++oh)
            {
                for (int ow = 0; ow < out_width; ++ow)
                {
                    Scalar sum = 0;
                    for (int ic = 0; ic < in_channels; ++ic)
                    {
                        for (int kd = 0; kd < kernel_d; ++kd)
                        {
                            for (int kh = 0; kh < kernel_h; ++kh)
                            {
                                for (int kw = 0; kw < kernel_w; ++kw)
                                {
                                    int in_d = od * stride_d - pad_d + kd;
                                    int in_h = oh * stride_h - pad_h + kh;
                                    int in_w = ow * stride_w - pad_w + kw;
                                    if (in_d >= 0 && in_d < in_depth &&
                                        in_h >= 0 && in_h < in_height &&
                                        in_w >= 0 && in_w < in_width)
                                    {
                                        int input_index = ((in_d * in_height * in_width * in_channels) +
                                                           (in_h * in_width * in_channels) +
                                                           (in_w * in_channels) + ic);
                                        int weight_index = (((((kd * kernel_h + kh) * kernel_w + kw) * in_channels + ic) * out_channels) + oc);
                                        sum += inputs[input_index] * weights[weight_index];
                                    }
                                }
                            }
                        }
                    }
                    sum += biases[oc];
                    int output_index = ((od * out_height * out_width * out_channels) +
                                        (oh * out_width * out_channels) +
                                        (ow * out_channels) + oc);
                    activation_function(outputs[output_index], sum, alpha);
                }
            }
        }
    }
}

template <typename Scalar, int pool_height, int pool_width, int stride_h, int stride_w>
void MaxPooling2D(Scalar *outputs, const Scalar *inputs, int in_height, int in_width, int channels) noexcept
{
    int out_height = (in_height - pool_height) / stride_h + 1;
    int out_width = (in_width - pool_width) / stride_w + 1;
    for (int c = 0; c < channels; ++c)
    {
        for (int oh = 0; oh < out_height; ++oh)
        {
            for (int ow = 0; ow < out_width; ++ow)
            {
                Scalar max_val = -std::numeric_limits<Scalar>::infinity();
                for (int ph = 0; ph < pool_height; ++ph)
                {
                    for (int pw = 0; pw < pool_width; ++pw)
                    {
                        int in_h = oh * stride_h + ph;
                        int in_w = ow * stride_w + pw;
                        int idx = (in_h * in_width * channels) + (in_w * channels) + c;
                        if (inputs[idx] > max_val)
                        {
                            max_val = inputs[idx];
                        }
                    }
                }
                int out_idx = (oh * out_width * channels) + (ow * channels) + c;
                outputs[out_idx] = max_val;
            }
        }
    }
}

template <typename Scalar>
void DepthwiseConv2D(Scalar *outputs, const Scalar *inputs, const Scalar *weights, const Scalar *biases,
                            int out_channels, int out_height, int out_width,
                            int in_channels, int in_height, int in_width,
                            int kernel_h, int kernel_w, int stride_h, int stride_w,
                            int pad_h, int pad_w,
                            activationFunction<Scalar> activation_function, Scalar alpha) noexcept
{
    for (int c = 0; c < in_channels; ++c)
    {
        for (int oh = 0; oh < out_height; ++oh)
        {
            for (int ow = 0; ow < out_width; ++ow)
            {
                Scalar sum = 0;
                for (int kh = 0; kh < kernel_h; ++kh)
                {
                    for (int kw = 0; kw < kernel_w; ++kw)
                    {
                        int in_h = oh * stride_h - pad_h + kh;
                        int in_w = ow * stride_w - pad_w + kw;
                        if (in_h >= 0 && in_h < in_height && in_w >= 0 && in_w < in_width)
                        {
                            int input_index = (in_h * in_width * in_channels) + (in_w * in_channels) + c;
                            int weight_index = (kh * kernel_w + kw) * in_channels + c;
                            sum += inputs[input_index] * weights[weight_index];
                        }
                    }
                }
                sum += biases[c];
                int output_index = (oh * out_width * in_channels) + (ow * in_channels) + c;
                activation_function(outputs[output_index], sum, alpha);
            }
        }
    }
}

template <typename Scalar>
void GlobalAvgPooling2D(Scalar *output, const Scalar *inputs, int in_height, int in_width, int channels) noexcept
{
    // Compute global average per channel.
    for (int c = 0; c < channels; ++c)
    {
        Scalar sum = 0;
        for (int h = 0; h < in_height; ++h)
        {
            for (int w = 0; w < in_width; ++w)
            {
                int idx = (h * in_width * channels) + (w * channels) + c;
                sum += inputs[idx];
            }
        }
        output[c] = sum / (in_height * in_width);
    }
}


template <typename Scalar>
void DepthwiseForsSeparableConv2D(Scalar *outputs, const Scalar *inputs, const Scalar *weights, const Scalar *biases,
                            int out_channels, int out_height, int out_width,
                            int in_channels, int in_height, int in_width,
                            int kernel_h, int kernel_w, int stride_h, int stride_w,
                            int pad_h, int pad_w,
                            activationFunction<Scalar> activation_function, Scalar alpha) noexcept
{
    for (int c = 0; c < in_channels; ++c)
    {
        for (int oh = 0; oh < out_height; ++oh)
        {
            for (int ow = 0; ow < out_width; ++ow)
            {
                Scalar sum = 0;
                for (int kh = 0; kh < kernel_h; ++kh)
                {
                    for (int kw = 0; kw < kernel_w; ++kw)
                    {
                        int in_h = oh * stride_h - pad_h + kh;
                        int in_w = ow * stride_w - pad_w + kw;
                        if (in_h >= 0 && in_h < in_height && in_w >= 0 && in_w < in_width)
                        {
                            int input_index = (in_h * in_width * in_channels) + (in_w * in_channels) + c;
                            int weight_index = (kh * kernel_w + kw) * in_channels + c;
                            sum += inputs[input_index] * weights[weight_index];
                        }
                    }
                }
                sum += biases[c];
                int output_index = (oh * out_width * in_channels) + (ow * in_channels) + c;
                activation_function(outputs[output_index], sum, alpha);
            }
        }
    }
}

template <typename Scalar, int out_channels, int out_height, int out_width>
void SeparableConv2D(Scalar *outputs, const Scalar *inputs, const Scalar *depthwise_weights, const Scalar *pointwise_weights, const Scalar *biases,
                            int in_channels, int in_height, int in_width,
                            int kernel_h, int kernel_w, int stride_h, int stride_w,
                            int pad_h, int pad_w,
                            activationFunction<Scalar> activation_function, Scalar alpha) noexcept
{
    std::vector<Scalar> depthwise_output(in_height * in_width * in_channels, 0);
    std::vector<Scalar> zero_bias(in_channels, 0);
    DepthwiseForsSeparableConv2D(
        depthwise_output.data(), inputs, depthwise_weights, zero_bias.data(), 
        in_channels, in_height, in_width,                                     
        in_channels, in_height, in_width,
        kernel_h, kernel_w, stride_h, stride_w, pad_h, pad_w,
        activation_function, alpha);

    for (int oc = 0; oc < out_channels; ++oc)
    {
        for (int i = 0; i < in_height * in_width; ++i)
        {
            Scalar sum = 0;
            for (int ic = 0; ic < in_channels; ++ic)
            {
                int index = i * in_channels + ic;
                int weight_index = ic * out_channels + oc;
                sum += depthwise_output[index] * pointwise_weights[weight_index];
            }
            sum += biases[oc];
            outputs[i * out_channels + oc] = sum;
            activation_function(outputs[i * out_channels + oc], sum, alpha);
        }
    }
}

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 


template <typename Scalar = double>
auto cnn3(const std::array<std::array<std::array<Scalar, 1>, 8>, 8>& initial_input) {

    constexpr int flat_size = 64; 
    std::array<Scalar, flat_size> model_input;
    int idx = 0;
    for (int i0 = 0; i0 < 8; i0++) {
      for (int i1 = 0; i1 < 8; i1++) {
            for (int i2 = 0; i2 < 1; i2++) {
                int flatIndex = i0 * 8 + i1 * 1 + i2 * 1;
                model_input[flatIndex] = initial_input[i0][i1][i2];
            }
        }
    }
    if (model_input.size() != 64) { throw std::invalid_argument("Invalid input size. Expected size: 64"); }


//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 


    // Layer 1: Conv2D
    constexpr std::array<Scalar, 144> convKernel_1 = {9.624268115e-02, -4.234938323e-02, -2.321056463e-02, -1.626273990e-01, 1.902416497e-01, 1.850140989e-01, -1.601290405e-01, -3.572514281e-02, -1.327373236e-01, -9.887439758e-02, -1.602489650e-01, 1.809449941e-01, 2.634950355e-02, -1.283073276e-01, -7.736686617e-02, 1.371086985e-01, 4.086374491e-02, -1.713173985e-01, -5.255921930e-02, 9.807604551e-02, 5.676572025e-02, 1.712426543e-02, 4.840575159e-03, 1.390751451e-01, 4.743812233e-02, -1.038409695e-01, -2.597805113e-02, -1.955625862e-01, -1.620546430e-01, 3.893326223e-02, -9.094440937e-02, 1.216760203e-01, -1.960035712e-01, -2.003521658e-02, 6.550223380e-02, -8.283975534e-03, 6.706392020e-02, 1.705022305e-01, 7.930108905e-02, -1.145262420e-01, 1.701327562e-01, 1.057123989e-01, -1.783077270e-01, 2.264230140e-02, 8.191044629e-02, -1.078304425e-01, -1.777937263e-01, -1.274039447e-01, -6.394876167e-03, 4.536082502e-03, 1.053586826e-01, -7.786244154e-02, -1.511978954e-01, -6.114166975e-02, 2.963273227e-02, 1.797822416e-01, 8.630177379e-02, 1.241944209e-01, 1.140430197e-01, 1.191629618e-01, 1.735923439e-01, -9.217582643e-02, 1.455013752e-01, 6.870869547e-02, 9.961627424e-02, 1.698548943e-01, 1.498924196e-01, -1.350960284e-01, 1.215065829e-02, 1.309055984e-01, 2.174085565e-02, 9.433621913e-02, -1.548594981e-02, 4.453511909e-02, 2.031500638e-02, 6.110543758e-02, -1.584657282e-02, -1.248415932e-01, -1.525297761e-01, -1.651447713e-01, 3.880546242e-02, 3.083853424e-02, 2.070685476e-01, 1.857892610e-02, -7.377770543e-02, -1.761471331e-01, -2.973010764e-03, -7.840618491e-02, -3.959197551e-03, -1.478364170e-01, -2.438144013e-02, -4.495402426e-02, -1.896348894e-01, 5.461553857e-02, 1.558960378e-01, -6.663994491e-02, -1.678345725e-02, -6.722296029e-02, -1.296375394e-01, 3.527139779e-04, 1.936020255e-01, -1.536649168e-01, -6.055296957e-02, -1.259919405e-01, -1.736904308e-02, 3.943095729e-02, 2.769145183e-02, 1.813974530e-01, 4.116372764e-02, 8.255305886e-02, -1.596551538e-01, -1.742188185e-01, 1.156619415e-01, 3.596819565e-02, 1.578408182e-01, -1.724532247e-01, -1.511737555e-01, 1.590863019e-01, 1.551201493e-01, -1.471711844e-01, 1.672091633e-01, -8.615779877e-02, -6.423076987e-02, 1.743770987e-01, -1.950556226e-02, 1.216312498e-01, -1.609060764e-01, 9.947499633e-02, 1.368275434e-01, 1.322230604e-02, 1.245420054e-01, 8.375091851e-02, 2.062398382e-02, 1.892776340e-01, 1.623197049e-01, -1.906761825e-01, 6.000262871e-02, -9.089483321e-02, 1.487080604e-01, 9.025878273e-03, 6.623313576e-02, -8.753080666e-02, 1.456275135e-01, -4.944568966e-03};
    constexpr std::array<Scalar, 16> convBias_1 = {3.405519528e-04, 1.496718032e-04, -4.262712901e-04, -1.670735364e-04, 4.477368784e-04, 5.772415170e-05, -2.835996274e-04, 4.104527034e-05, -4.603766138e-04, -1.799398306e-04, -1.376482978e-04, 7.149249723e-05, -7.604196435e-04, -2.990619396e-04, 2.970228379e-04, -1.633421198e-04};

    // Layer 2: Normalization
    constexpr std::array<Scalar, 16> gamma_2 = {9.894772172e-01, 9.970571995e-01, 1.003530860e+00, 9.918981194e-01, 9.880627394e-01, 1.006086230e+00, 1.004087687e+00, 1.003017306e+00, 1.000917673e+00, 9.995309114e-01, 1.007169247e+00, 1.002183676e+00, 1.005843878e+00, 9.913324714e-01, 1.000634670e+00, 1.006371140e+00};
    constexpr std::array<Scalar, 16> beta_2 = {-8.136590943e-03, -5.509175360e-03, 2.789282880e-04, -2.883007284e-03, -2.076229779e-03, 4.847789183e-03, 1.297082985e-03, 2.523797331e-03, -6.631322904e-04, -9.510418167e-04, 5.113353487e-03, 2.634743229e-03, -1.756283920e-03, -3.236271907e-03, -5.696909036e-03, 3.365629120e-03};
    constexpr std::array<Scalar, 16> mean_2 = {1.998931356e-02, -7.719084970e-04, 3.852669150e-02, -2.293998003e-02, 5.609373096e-03, 2.681971155e-02, 1.453735493e-02, -1.240031328e-02, 2.197127789e-02, -1.256028563e-02, -6.232037675e-03, 2.987099811e-02, -1.137858490e-03, -1.555718575e-02, -2.267368510e-02, -7.103642914e-03};
    constexpr std::array<Scalar, 16> variance_2 = {8.612027168e-01, 8.610069156e-01, 8.620985150e-01, 8.613535762e-01, 8.617213368e-01, 8.626198173e-01, 8.614271879e-01, 8.628197312e-01, 8.612155914e-01, 8.611249924e-01, 8.613889217e-01, 8.628395796e-01, 8.613750935e-01, 8.612215519e-01, 8.624669313e-01, 8.615615964e-01};
    constexpr Scalar epsilon_2 = 1.000000000e-03;

    // Layer 4: MaxPooling2D
    // Pooling layer parameters for layer 4
    constexpr std::array<int, 2> poolSize_4 = {2, 2};
    constexpr std::array<int, 2> poolStrides_4 = {2, 2};
    constexpr const char* poolPadding_4 = "valid";

    // Layer 5: SeparableConv2D
    constexpr std::array<Scalar, 144> sepDepthwise_5 = {5.172366649e-02, -7.525233179e-02, 2.030060999e-02, -1.219945215e-02, 1.268910021e-01, -1.144285500e-01, 1.436575949e-01, 1.313735843e-01, -1.491670907e-01, 4.971595854e-02, 1.639096290e-01, 6.803373247e-02, -2.208684385e-02, 1.133558899e-01, 1.384389587e-02, -1.427563876e-01, -1.715069413e-01, -1.928864419e-01, -3.032680368e-03, -1.590114087e-02, -1.794085205e-01, 1.607488245e-01, 1.006379053e-01, -3.404518589e-02, -8.784006536e-02, 1.741464250e-02, 1.666722447e-01, -8.382351696e-02, 1.601318121e-01, 5.703052133e-02, 4.767467454e-02, -1.304957569e-01, 2.393873595e-02, 1.011527479e-01, 4.649659991e-02, 9.187747538e-02, 1.145107448e-01, -3.664393723e-02, -1.243763883e-02, 1.642772853e-01, -4.104215652e-02, 2.153866366e-02, 1.565617882e-02, 6.862789392e-02, -5.345879495e-02, -1.869848073e-01, -1.172154844e-01, 6.838836521e-02, -6.215506233e-03, 7.615356892e-02, 1.167096272e-01, -1.464363039e-01, -1.926794201e-01, -1.253594160e-01, 6.009584293e-02, -1.853919923e-01, 1.040831953e-01, 8.539763093e-02, -6.740234047e-02, 1.329345256e-01, -1.549226046e-01, 1.317598391e-02, 5.216746032e-02, 1.946476549e-01, 2.263428271e-02, -1.311136335e-01, 1.955322474e-01, 1.475731879e-01, 1.880336702e-01, 4.043474048e-02, -1.934120506e-01, 1.350586861e-01, -8.308361471e-02, -6.689393520e-02, -4.054398090e-02, -1.491122395e-01, -3.728552908e-02, 6.735479087e-02, 1.147121713e-01, 8.414900303e-02, -1.869264394e-01, 6.694030017e-02, -3.537788242e-02, -7.715888321e-02, 4.879749194e-02, -6.827653944e-02, 1.954524666e-01, 1.524293721e-01, -1.165759936e-02, -7.406491041e-02, -1.593707949e-01, 1.659227908e-01, -1.639529914e-01, -1.192742661e-01, 8.719103783e-02, 1.882708371e-01, 1.209926456e-01, -3.437566385e-02, -1.121792244e-03, 5.729045370e-06, 7.724087685e-02, -8.729009330e-02, 2.008608431e-01, 1.571657360e-01, 6.516059488e-02, -1.305316538e-01, -1.355892569e-01, 9.196496010e-02, 1.410816610e-01, -1.168925986e-01, 1.080636978e-01, -6.266055256e-02, 4.692886490e-03, -3.734606132e-02, 1.288370490e-01, -4.918648303e-02, 1.905337423e-01, 9.732320905e-02, -8.850564808e-02, 1.668132544e-01, 1.340390444e-01, 7.788979262e-02, -1.066161245e-01, 1.108472720e-01, -1.094775461e-02, 1.917259693e-01, 8.220644295e-02, -7.579389960e-02, 9.492912143e-02, 1.636087745e-01, -1.548093744e-03, -8.836372942e-02, -3.873126209e-02, -6.224265695e-02, 1.690647304e-01, -1.804331094e-01, 1.250124425e-01, -6.528831273e-02, -1.709636599e-01, -2.974379621e-02, -4.370345548e-02, -9.011447430e-02, 1.967754960e-01, -1.442898661e-01};
    constexpr std::array<Scalar, 512> sepPointwise_5 = {3.683578968e-02, -2.281173468e-01, 2.952695489e-01, -2.170285881e-01, -2.496832758e-01, 2.398632020e-01, -1.533377822e-02, 1.400139928e-01, 7.965865731e-02, -3.046983778e-01, 6.781750917e-02, 2.925536036e-02, 6.946240552e-03, -5.167500302e-02, -2.536082268e-01, -3.224404752e-01, 1.622557938e-01, 3.486883640e-02, -2.228318714e-02, -2.037052661e-01, 1.160582080e-01, -2.687614858e-01, -2.413888723e-01, -1.836349070e-01, -2.711263299e-01, -3.449823856e-01, 3.370117247e-01, 2.530367076e-01, 2.003581077e-01, -2.795137465e-01, 3.494675159e-01, 1.306991652e-02, -2.806476951e-01, 1.050054207e-01, 2.384161353e-01, 3.124050498e-01, -1.400170624e-01, -3.472515196e-02, -6.039827317e-02, 7.008478791e-02, 2.670150995e-01, 1.025764644e-01, 3.079284430e-01, -2.038722187e-01, -3.396825492e-01, -1.056131572e-01, 3.074612319e-01, 1.341270059e-01, -2.493510991e-01, -1.230445579e-01, 3.266912699e-01, 1.011102647e-01, 2.984887958e-01, -4.491018876e-02, -2.545714676e-01, -1.423344910e-01, 1.589848995e-01, -2.191042155e-01, -1.820006818e-01, -2.051063031e-01, -2.587280869e-01, -1.958618462e-01, 9.335581213e-02, -2.965657115e-01, 3.308885694e-01, 2.334447056e-01, 6.233873591e-02, -3.006127477e-01, 2.358256727e-01, -1.076693162e-01, -5.828567222e-02, -2.457184494e-01, 3.011674881e-01, -3.502272666e-01, -5.027711764e-02, 1.439651996e-01, -1.226612777e-01, 2.257551700e-01, -2.849088907e-01, 1.942171901e-01, 1.237015128e-01, 3.226161301e-01, -2.698131502e-01, -1.481818408e-01, 3.318506181e-01, -2.255472839e-01, -7.261439413e-02, -3.174337745e-01, -9.614828974e-02, 5.277145654e-02, 2.893229425e-01, -1.224900931e-01, -1.282372624e-01, 1.413019150e-01, -2.896254361e-01, -7.448944729e-03, -8.354175091e-02, -1.260299385e-01, 2.581396997e-01, 1.742506027e-01, 1.404215097e-01, -2.489478141e-01, 1.487531215e-01, 5.664446950e-02, 1.437369883e-01, 2.435965985e-01, -3.045798838e-01, -2.824234664e-01, -3.211508095e-01, -1.647530496e-01, -2.732247114e-01, 2.072509937e-02, -2.610041201e-01, -3.305841684e-01, -2.551559210e-01, 3.391370773e-01, -2.507044673e-01, -2.751429379e-01, 7.467314601e-02, 3.263618350e-01, -1.370988488e-01, -2.213585079e-01, 9.097171575e-02, 1.019533575e-01, -2.950330377e-01, 2.669374347e-01, -1.499759555e-01, -1.584732234e-01, -7.129835337e-02, -2.170622051e-01, -2.084904611e-01, -2.459959537e-01, 3.213815391e-02, -2.245765626e-01, 6.426448002e-03, -2.488723248e-01, 1.580244675e-02, 1.657088846e-01, 2.584591806e-01, 2.372558266e-01, -2.298513502e-01, -1.479549147e-02, 2.678834498e-01, -4.396406561e-02, 2.524852157e-01, -1.478359252e-01, 2.874028683e-01, 1.345285028e-01, 2.648536265e-01, -3.866547346e-02, 2.254906446e-01, 1.144510210e-01, -1.005079150e-01, -3.359189332e-01, 2.132481039e-01, -5.826017819e-03, -2.288216352e-01, 1.767016500e-01, -4.839858413e-02, -1.038838848e-01, -2.331538945e-01, -4.112260044e-02, -1.044943929e-01, -1.300332248e-01, 2.951748371e-01, 1.979384720e-01, -1.557242721e-01, -9.519087523e-02, -1.354260147e-01, -4.100570083e-02, 1.864730120e-01, -3.440028429e-01, -1.304616928e-01, 4.163769260e-02, -8.139582723e-02, -2.678006589e-01, 1.062282622e-01, -1.697656214e-01, -9.194865078e-02, 3.405761719e-01, -9.710933268e-02, 6.602507830e-02, 2.119445056e-01, 4.469781183e-03, 1.742791384e-01, -1.580943316e-01, -8.443142287e-03, -3.989112377e-02, -2.817739248e-01, -9.800472111e-02, -3.268239796e-01, 3.234931827e-02, -1.044569612e-01, 3.586822450e-01, -1.360357851e-01, 1.008441076e-01, -1.488277167e-01, -2.619993091e-01, 3.289491534e-01, -1.781582683e-01, 2.916225195e-01, -3.220385611e-01, -1.634929031e-01, 2.095930129e-01, -1.407515109e-01, -2.434031218e-01, 5.254778638e-02, -2.601015568e-01, 2.222907916e-02, -8.618456125e-02, -1.069213450e-01, 2.492813766e-01, 1.446828544e-01, -7.915277034e-02, 2.300439626e-01, -6.850193441e-02, 2.355977446e-01, 2.212564349e-01, -2.735109925e-01, 1.363906115e-01, 2.174120694e-01, -2.688095272e-01, -2.577451169e-01, 1.335451938e-02, 1.962378323e-01, 2.187317163e-01, 3.060815632e-01, -2.742648721e-01, 2.862043381e-01, 1.580450237e-01, -2.937664390e-01, -3.948553279e-02, -2.365974635e-01, 2.183574587e-01, 1.538689137e-01, -2.713949084e-01, -2.546001673e-01, 2.767339647e-01, -5.360944197e-02, 1.503694504e-01, -1.161480993e-01, -8.302617818e-03, -4.341104627e-02, -5.327249691e-02, 2.705010176e-01, 1.134139001e-01, 1.452860683e-01, -1.008651257e-01, 2.946564257e-01, 1.296262294e-01, 2.891556621e-01, 2.770038843e-01, -9.789496660e-02, -1.925552636e-01, -4.998654500e-02, -3.109924197e-01, -5.864026770e-02, -1.233972088e-01, 1.852549464e-01, -3.528088033e-01, 1.019649059e-01, -8.179778606e-02, -2.530825734e-01, 2.825989425e-01, -1.190928966e-01, -2.264156640e-01, 2.716410756e-01, 2.481609732e-01, 1.313188970e-01, 2.795426846e-01, 2.093314826e-01, -1.852633208e-01, -3.436668217e-01, -3.299364746e-01, -1.432645917e-01, 2.253836254e-03, -1.185027212e-01, 2.406609654e-01, -4.778911918e-02, -9.039241821e-02, -1.762202829e-01, 7.389778644e-02, -1.219535172e-01, -3.457827568e-01, -2.653003633e-01, -2.197922319e-01, 3.018361628e-01, -2.700300813e-01, 2.526645660e-01, 2.601926625e-01, 2.452107333e-02, -1.195885092e-01, 2.160593569e-01, -1.048795879e-01, -1.972730085e-02, 2.184738964e-01, 2.594104111e-01, 1.134608537e-01, -5.528496206e-02, -1.318713576e-01, -4.574330524e-03, 9.684531391e-02, 3.414514959e-01, 1.779487729e-02, 2.092769593e-01, 2.764194310e-01, -3.065763116e-01, -2.490115464e-01, -3.399656117e-01, 5.884419009e-02, 1.337630004e-01, -3.574464917e-01, 3.458982110e-01, 3.035205603e-01, 2.307042629e-01, -1.530514508e-01, -1.671471149e-01, 1.511643082e-01, -2.648186684e-01, 3.288890719e-01, -6.560847163e-02, 3.000565618e-02, -3.373723924e-01, 1.855994463e-01, -8.058962971e-02, 8.873818070e-02, 3.237861097e-01, 3.186032176e-01, 1.114378870e-01, -3.182666302e-01, 1.664873660e-01, -1.654509902e-01, -1.604892015e-01, 1.503429264e-01, -1.870868504e-01, -2.567355037e-01, -1.318943650e-01, 2.157434672e-01, 1.189234704e-01, 1.298210770e-01, 2.298959941e-01, 1.028293520e-01, -2.972671986e-01, -2.863982916e-01, 2.563705742e-01, -2.863163054e-01, 2.332652509e-01, -2.292258292e-01, 3.518488109e-01, 2.924410701e-01, -4.065397009e-02, 1.094097346e-01, -2.810240090e-01, 2.286490649e-01, 6.287755072e-02, -6.630635262e-02, 2.326577157e-01, 1.224831939e-01, 3.936835378e-02, -3.241602182e-01, 3.212334514e-01, 3.229749799e-01, -2.878341824e-03, -3.339168429e-01, 1.610345393e-01, 4.462086037e-02, -2.628100216e-01, -3.569563925e-01, -1.346728355e-01, 3.013167083e-01, 1.342644691e-01, 3.175433576e-01, -7.623921335e-02, 2.831280231e-01, -1.844516248e-01, -3.048203588e-01, 1.125299186e-01, -3.412329555e-01, -3.212370276e-01, -3.298146129e-01, -1.206494123e-01, -2.586346865e-01, -1.438289732e-01, -3.249632716e-01, 2.561234534e-01, -2.644935995e-02, -1.074377149e-01, 2.901143134e-01, -3.092592061e-01, 2.570201755e-01, -3.493334055e-01, -1.927657276e-01, -2.803041935e-01, 2.736685872e-01, 3.001405001e-01, 7.875972241e-02, 3.199183643e-01, -3.212771416e-01, -2.587516010e-01, -2.211637944e-01, 2.049539238e-01, 9.157644212e-02, 3.480330706e-01, -1.834669262e-01, -2.647668868e-02, 1.340792775e-01, 2.787605524e-01, 1.205777228e-01, 2.981109023e-01, -2.336271405e-01, -1.703486890e-01, 1.312990040e-01, -2.109928876e-01, -1.806163192e-01, 1.908802986e-01, 6.014503166e-02, -2.387695611e-01, -6.325688446e-04, -3.262997568e-01, 2.526875958e-02, -2.940982580e-01, 9.861892462e-02, -6.450760365e-02, 1.241222993e-01, 2.448727936e-02, 1.947401166e-01, -8.832646161e-02, 2.133231014e-01, 1.192018948e-02, -1.304137707e-01, 2.004299760e-01, 2.449442893e-01, 6.295610219e-02, -3.055884838e-01, 2.030894458e-01, 2.457650304e-01, -4.127491731e-03, 1.754127741e-01, 2.987953424e-01, -2.954982221e-01, 1.114257425e-01, 8.669640869e-02, -6.672491133e-02, 2.132345885e-01, -2.244277447e-01, -1.370718479e-01, 2.715054452e-01, 2.518053949e-01, 2.676801682e-01, 3.079445362e-01, 3.093319535e-01, 1.592090428e-01, -2.752131522e-01, -2.469997108e-01, 9.658045322e-02, 1.709261388e-01, -2.277681828e-01, -2.799251974e-01, 1.929432154e-01, -1.799570769e-01, 3.519771695e-01, 2.315007597e-01, 1.646376550e-01, 3.345866203e-01, -5.600213259e-02, 3.064379096e-01, 5.672500655e-02, 2.163058519e-01, -3.375328183e-01, -3.025772572e-01, -1.936838180e-01, -2.840598524e-01, 1.095839143e-01, 1.361195594e-01, -1.766234785e-01, 2.209657133e-01, -2.859521806e-01, -2.018349022e-01, 2.200868577e-01, -3.065113723e-01, 1.842828244e-01, 2.074264586e-01, -3.326330334e-02, 7.817023247e-02, 2.853001356e-01, 1.015884131e-01, 2.547703683e-01, 6.484795362e-02, 3.003399670e-01, 7.628612965e-02, 1.245700642e-01, -2.850794792e-01, 3.061258495e-01, 1.118099093e-01, -2.320578694e-01, 1.154038236e-01, 2.898097932e-01, 3.183440566e-01, 1.236394122e-01, -7.736676186e-02, 4.334098101e-02, -1.984602064e-01, -2.235132307e-01, -1.387193501e-01, -1.695337892e-01, -3.859368386e-03, -2.080785483e-01, 2.294286713e-02, -4.181051999e-02, -2.840306796e-02, 3.044624329e-01, 1.491332054e-01};
    constexpr std::array<Scalar, 32> sepPointwiseBias_5 = {-2.313661389e-04, 2.559658242e-05, -2.085765300e-05, -2.170506013e-05, -3.263389590e-05, 2.012067489e-05, 7.550473674e-05, -8.951307973e-05, 3.933602056e-05, -2.128895721e-05, 9.491087985e-05, -1.013994188e-04, -5.057427916e-05, -1.567067084e-04, 4.222510324e-05, 8.421369785e-06, -1.048692357e-04, 5.419966692e-05, -8.038066153e-05, 8.073049685e-06, 1.333986002e-04, 8.951794007e-05, 1.500347844e-05, 7.050029672e-05, 5.430116653e-05, 6.280959497e-05, 4.949383765e-07, 2.281304478e-05, -3.587502306e-06, 2.188714279e-05, -5.645240526e-05, -2.247837801e-05};

    // Layer 6: Normalization
    constexpr std::array<Scalar, 32> gamma_6 = {9.986504912e-01, 9.984036684e-01, 9.961444139e-01, 9.957431555e-01, 9.997287989e-01, 1.005513072e+00, 9.990134835e-01, 1.002899528e+00, 1.000628710e+00, 9.990168214e-01, 9.980795383e-01, 9.993651509e-01, 1.005324364e+00, 9.981431365e-01, 1.005076408e+00, 1.004391074e+00, 1.007933021e+00, 1.002730012e+00, 1.008452892e+00, 1.003076792e+00, 1.003514767e+00, 9.956085682e-01, 9.930019379e-01, 9.950427413e-01, 1.004717708e+00, 9.915969372e-01, 1.001081228e+00, 9.882881045e-01, 9.962154031e-01, 1.002106786e+00, 9.950008988e-01, 9.878786802e-01};
    constexpr std::array<Scalar, 32> beta_6 = {-7.792293560e-03, -5.536080338e-03, 3.305032849e-03, 1.032173540e-02, -4.044832662e-03, -1.859522774e-03, -1.068450231e-02, -5.205722526e-03, -1.698324922e-03, 3.977872897e-03, -4.485558253e-03, -7.071330212e-03, 2.310635755e-03, 7.060744800e-03, -2.403238323e-03, -3.229859285e-03, 1.280939556e-03, 9.379619732e-03, 4.531139508e-03, 6.785069127e-03, 2.417096402e-03, 1.112327911e-03, 6.449886132e-03, 2.725582337e-03, 6.756547373e-03, 5.884278566e-03, 1.125442423e-02, -1.449238334e-04, 3.617578885e-03, -1.516376622e-03, 9.095220827e-03, 1.086851582e-02};
    constexpr std::array<Scalar, 32> mean_6 = {2.860842273e-02, 5.150308833e-02, 2.044533379e-02, -3.908189386e-02, 2.020039782e-02, -3.631325439e-02, 8.052560501e-03, -3.403984383e-02, 1.146674529e-02, -2.121216245e-02, 5.787491333e-03, 4.884568974e-03, 2.623644890e-03, 3.742671758e-02, 3.902858123e-03, 2.706584893e-02, 6.886959542e-03, 3.318434209e-02, -9.758104570e-03, 2.356171981e-02, 1.877797395e-02, -1.964106597e-02, 6.609141361e-03, -3.772691265e-02, 6.466470193e-03, 2.112711221e-02, 8.050893666e-04, 1.532335207e-02, -2.385225520e-02, -2.106051147e-02, -1.802610792e-02, -4.330660403e-02};
    constexpr std::array<Scalar, 32> variance_6 = {8.627683520e-01, 8.656980991e-01, 8.703369498e-01, 8.660805225e-01, 8.663059473e-01, 8.650431037e-01, 8.663253188e-01, 8.632565737e-01, 8.656744957e-01, 8.666768670e-01, 8.627687693e-01, 8.680240512e-01, 8.641957045e-01, 8.629419208e-01, 8.659347296e-01, 8.643227220e-01, 8.624713421e-01, 8.657953143e-01, 8.624451160e-01, 8.632972836e-01, 8.660556674e-01, 8.628754616e-01, 8.638750315e-01, 8.644484878e-01, 8.678326607e-01, 8.631047010e-01, 8.671329618e-01, 8.638718724e-01, 8.686624765e-01, 8.693650365e-01, 8.669347167e-01, 8.692469597e-01};
    constexpr Scalar epsilon_6 = 1.000000000e-03;

    // Layer 8: MaxPooling2D
    // Pooling layer parameters for layer 8
    constexpr std::array<int, 2> poolSize_8 = {2, 2};
    constexpr std::array<int, 2> poolStrides_8 = {2, 2};
    constexpr const char* poolPadding_8 = "valid";

    // Layer 9: DepthwiseConv2D
    constexpr std::array<Scalar, 288> depthwiseKernel_9 = {3.853644058e-02, 9.486486018e-02, -5.605775863e-02, 4.937411752e-03, 1.315554827e-01, 5.587385967e-02, -4.561536759e-02, 3.107993118e-02, -1.280060858e-01, 3.176642349e-03, 5.495306477e-02, -9.240240790e-03, -1.322441250e-01, 3.663217649e-02, 2.110754326e-02, -1.403614432e-01, -1.085314900e-01, -1.075611040e-01, 2.203380875e-02, 8.089098334e-02, -1.443435997e-01, -3.788416460e-02, 9.978472441e-02, 7.751769572e-02, 8.423759043e-02, -1.382464822e-02, -1.882938854e-02, -8.657722920e-02, 3.714746982e-02, -1.143978685e-01, -1.473494172e-01, 4.657438770e-02, 1.454491764e-01, -4.077880830e-02, 3.040886670e-02, -5.487453565e-02, 4.462898523e-02, 2.926180884e-02, 1.025089771e-01, -1.389319077e-02, -3.862295067e-03, -6.598401070e-02, -5.850254744e-02, 9.464823455e-02, 1.344681233e-01, 1.282063425e-01, 1.215120628e-01, -7.284275256e-03, -1.336820573e-01, -1.024250388e-01, 9.218362719e-02, -1.558088213e-01, -4.827004671e-02, -4.176973179e-02, 5.813748762e-02, -3.448705748e-02, -1.207652986e-01, -1.372770369e-01, 1.043626070e-01, -2.504137158e-02, 5.685793608e-02, -1.163302436e-01, 1.709662005e-02, -7.156756241e-03, -1.240553111e-01, -1.134622246e-01, 9.051643312e-02, -1.266966760e-01, -2.716568485e-02, -5.435854197e-02, 1.932817884e-02, -4.222798720e-02, -1.208078042e-01, -3.939147666e-02, 2.292357385e-02, -1.461304072e-02, 3.900339128e-03, -3.063512407e-02, -1.318779737e-01, -2.959967125e-03, 1.163768116e-02, 5.531541631e-02, -1.137446389e-01, -6.833744049e-02, 1.098851785e-01, 9.014916420e-02, -4.131395835e-03, -1.332322359e-01, 3.207979724e-02, -1.269802600e-01, 6.408984959e-02, -1.165098473e-01, 8.308402263e-03, 1.012341157e-01, 1.118298844e-01, -1.105957553e-01, 8.090074360e-02, 9.508951753e-02, 1.445253342e-01, 1.244219691e-01, -1.004054472e-01, -1.094808057e-01, -2.843851037e-02, 4.808639362e-02, 5.608677864e-02, -7.252024114e-02, 5.603030324e-02, -9.676481783e-02, 5.476593226e-02, -9.687697887e-02, 7.140404545e-03, -1.379128993e-01, -4.343779013e-02, 3.992867842e-02, -1.090969052e-02, -1.031014472e-01, -1.267352998e-01, -1.446888447e-01, -2.442086674e-02, 1.305933297e-01, -1.339868754e-01, -2.146511804e-03, 2.465063520e-02, -9.936523438e-02, -2.257229947e-02, -8.138076961e-02, 1.281721294e-01, 4.938342050e-02, 6.227393076e-02, -1.203201115e-01, -1.220713258e-01, 4.119344521e-03, 3.703598306e-02, 8.552616835e-02, 2.399503812e-02, -6.304588169e-02, 1.254125834e-01, -1.336160451e-01, 1.200444624e-01, 9.104564786e-02, -5.180048570e-02, 8.274091780e-02, 1.436753422e-01, 1.941263303e-02, 8.891135454e-02, 4.566684365e-02, -1.115354821e-01, 1.029535681e-01, 4.669132456e-02, -3.776014596e-02, 6.749442220e-02, 1.027152911e-01, 1.005684063e-01, 1.248419732e-01, -7.154744864e-02, 2.994974144e-02, -5.561702419e-04, -6.832533330e-02, -1.556876674e-02, 1.469242666e-02, 3.125052154e-02, -4.417481273e-02, 5.394960567e-02, -9.765898436e-02, 2.901032008e-02, -1.408508271e-01, 1.224788278e-01, -7.208863646e-02, 4.562212899e-02, 2.835783921e-02, -7.966049761e-02, 9.796710312e-02, -1.220796141e-03, -9.402479976e-03, 3.192102909e-02, -1.188543141e-01, 9.733323008e-02, 1.204048172e-01, -1.421307474e-01, -6.084352732e-03, 9.441445023e-02, -8.782690018e-02, -1.322420388e-01, -8.020246774e-02, 4.136325046e-02, -8.126533777e-02, 9.725537896e-02, 3.485382721e-02, 1.203963161e-01, -2.989377081e-02, 6.856909394e-02, -9.687130898e-02, -3.999458253e-02, 1.738254167e-02, 3.916994110e-02, 1.437988579e-01, 1.376130134e-01, 2.814118750e-02, 5.983756110e-02, 3.313675150e-02, -2.186302794e-03, -6.748022139e-02, -5.074722692e-03, -2.580850199e-02, -9.908582084e-03, -2.742788568e-02, 1.348509043e-01, -5.640730262e-02, 1.733801886e-02, -1.151060462e-01, -9.515929222e-02, -1.305703372e-01, -8.182411641e-02, -2.914235182e-02, -1.168469638e-01, -8.107374609e-02, -3.141980246e-02, 5.584911630e-02, 2.128296532e-02, -1.313355416e-01, -1.074883118e-01, -6.088773161e-02, 3.325018287e-02, -3.914628923e-02, 8.524481952e-02, -9.842775017e-02, 7.402939349e-02, 7.054487616e-02, -2.246700227e-02, 1.078823358e-01, -4.604376107e-02, -8.513315767e-02, -5.780595168e-02, 1.125984788e-01, -1.104088780e-02, -6.014201790e-03, -1.204140484e-01, -1.756288856e-02, 2.170025371e-02, -8.850475401e-02, -5.125663802e-02, -8.017534018e-02, 7.008547336e-02, -9.431876242e-02, 9.161979705e-02, 4.686295986e-02, -9.998140484e-02, -7.313610055e-03, 7.879522443e-02, 7.054331712e-03, -1.157251522e-01, -4.551427439e-03, 3.416407481e-02, 1.004737839e-01, -1.092677340e-01, 9.472633153e-02, 1.291822791e-01, 4.451387003e-02, 1.122660656e-02, -4.535535723e-02, 7.850862294e-02, -1.093650535e-01, 9.185818024e-03, 7.089129090e-02, -1.239521503e-01, 4.532043636e-02, -1.056332048e-02, -8.417882025e-02, -4.300906137e-02, 1.382092535e-01, -3.314996511e-02, 4.977224395e-02, -4.315477237e-02, -7.552437484e-02, 3.905792534e-02, -3.452976793e-02, 1.300157458e-01, -7.837742567e-02, 3.238579258e-02, 1.085457727e-01, 1.284579486e-01, -9.639620781e-03, -1.238411944e-02, -1.137017161e-01, 1.073881760e-01, 4.419011995e-02, 8.552514017e-02, 4.025432281e-03};
    constexpr std::array<Scalar, 32> depthwiseBias_9 = {-5.202412649e-05, 1.315336885e-05, 7.488686970e-05, -4.265575626e-05, 1.512289455e-04, 4.733453170e-05, -5.304387741e-05, -7.872340939e-05, -2.293439138e-05, 6.580594345e-05, 1.717681153e-05, 1.133166916e-05, 6.186717656e-05, -8.719722246e-05, -7.795298006e-05, -1.900911011e-04, -6.492172542e-05, -4.694597374e-05, 2.166161721e-06, -1.072567247e-04, -1.038355258e-04, -1.734836987e-04, 1.900831558e-05, 6.755598588e-05, -2.322097316e-05, 6.072481483e-05, 8.280467227e-06, 1.004443184e-04, 2.898469756e-05, -1.724607500e-05, -1.279337266e-05, 5.064037396e-05};

    // Layer 10: Normalization
    constexpr std::array<Scalar, 32> gamma_10 = {1.000763774e+00, 9.991940856e-01, 9.956337214e-01, 9.962480664e-01, 9.991362095e-01, 1.005560040e+00, 9.988712072e-01, 1.002932906e+00, 1.000994682e+00, 9.990162849e-01, 9.978062510e-01, 1.000284791e+00, 1.005211949e+00, 9.981666207e-01, 1.004866362e+00, 1.005361319e+00, 1.007687330e+00, 1.004092336e+00, 1.008608460e+00, 1.003258705e+00, 1.003517270e+00, 9.954572320e-01, 9.929032326e-01, 9.946078658e-01, 1.005573630e+00, 9.911036491e-01, 1.001629353e+00, 9.880263209e-01, 9.963585138e-01, 1.002161264e+00, 9.954143763e-01, 9.882252216e-01};
    constexpr std::array<Scalar, 32> beta_10 = {-1.119753579e-03, -5.720686167e-03, -2.923801308e-03, 2.634142525e-03, -3.615063149e-03, 9.278347716e-03, -3.900649725e-03, 3.010915825e-03, 7.244629785e-03, 4.038558400e-04, 3.254615585e-04, -1.930172439e-03, 6.349513773e-03, 2.316882368e-03, 1.267372631e-03, 1.499430509e-03, 8.915486746e-03, -1.163317915e-02, 5.148516502e-03, 5.638229661e-03, 6.373065989e-03, -8.355108090e-03, -1.518375124e-03, -7.391509600e-03, -2.435083035e-03, -1.718499931e-03, -1.809115871e-03, -1.209314167e-02, -3.060968127e-03, 5.231699906e-03, 1.397754997e-03, -3.869800130e-03};
    constexpr std::array<Scalar, 32> mean_10 = {3.542022780e-02, -2.393076010e-02, 5.139315501e-03, 1.217947807e-02, 1.486837491e-02, -1.210540649e-03, 1.271741837e-02, -1.917085238e-02, 7.240946405e-03, -1.853448339e-02, 1.232765429e-02, 1.585674472e-02, -1.253665658e-03, 2.144159935e-02, 3.646147996e-02, -2.871986106e-02, 1.541586593e-03, -4.343918059e-03, -2.220943943e-02, -1.945020445e-02, 1.388764288e-02, -2.113863640e-02, -7.073555607e-03, 1.899195462e-02, 1.788382418e-02, 3.531510010e-03, 1.080766553e-03, -1.623640768e-02, 1.555456966e-02, -1.958268881e-02, 1.080669463e-02, 9.666728438e-04};
    constexpr std::array<Scalar, 32> variance_10 = {8.630663157e-01, 8.641897440e-01, 8.632584214e-01, 8.665452003e-01, 8.610716462e-01, 8.650261760e-01, 8.628811836e-01, 8.610116839e-01, 8.623425961e-01, 8.663799763e-01, 8.626291156e-01, 8.625326753e-01, 8.635244966e-01, 8.634068966e-01, 8.617030978e-01, 8.625828028e-01, 8.628985286e-01, 8.640366793e-01, 8.640419841e-01, 8.633446097e-01, 8.718988299e-01, 8.619012237e-01, 8.647747636e-01, 8.629700541e-01, 8.640367985e-01, 8.643727303e-01, 8.644930124e-01, 8.610292673e-01, 8.638994098e-01, 8.644863367e-01, 8.632850051e-01, 8.643980026e-01};
    constexpr Scalar epsilon_10 = 1.000000000e-03;

    // Layer 12: Conv2D
    constexpr std::array<Scalar, 512> convKernel_12 = {-1.536906660e-01, 9.918785840e-02, 2.265896350e-01, 5.658091046e-03, -4.308064468e-03, -3.158822954e-01, 5.450182036e-02, -2.800277770e-01, 3.083840311e-01, 1.146604493e-01, -3.242405653e-01, -1.457566619e-01, -7.071951032e-02, 2.387088537e-01, 6.148286909e-02, 2.021120489e-01, 1.207068115e-01, 1.928188801e-01, -3.429781646e-04, -2.928927243e-01, 5.893114582e-02, 1.584797800e-01, -3.042583466e-01, -5.629353598e-02, -3.296767175e-02, -3.176001310e-01, -2.371542305e-01, -1.279509515e-01, 1.664920598e-01, 3.214654922e-01, 2.500525117e-01, 3.106578887e-01, -9.232721478e-02, -7.261785865e-02, 3.389766812e-02, -3.342868984e-01, -6.646269560e-02, 2.944386899e-01, 2.195464522e-01, -3.178356290e-01, 2.117546201e-01, 4.922337830e-02, -2.990365624e-01, -1.989308000e-01, -2.969617546e-01, -1.758261025e-02, 4.685308412e-02, -1.178145558e-01, 2.231317908e-01, -1.518853754e-01, 1.671110839e-01, 1.428291053e-01, 8.078613877e-02, -3.172586858e-01, 1.687297672e-01, -1.080057863e-02, 8.342146128e-02, -2.796277702e-01, -2.513989508e-01, 4.589321464e-02, 1.113695204e-01, -1.387771070e-01, -1.591159850e-01, -2.298843116e-01, -3.082485795e-01, -1.820750535e-02, -2.812690437e-01, -4.281787947e-02, 3.124994636e-01, -2.425043583e-01, -1.585966200e-01, -4.877948388e-02, -1.809022129e-01, 2.311657965e-01, 3.091718554e-01, 1.390828490e-01, -1.516907364e-01, 1.487918198e-01, 3.036548197e-01, -9.177979827e-02, -5.275866389e-02, -2.147863060e-01, -2.578508556e-01, 6.736189127e-02, 2.815514803e-01, -2.365855128e-01, -2.269868851e-01, -2.681119740e-01, -9.821397811e-02, -2.770564705e-02, 2.867115140e-01, -2.763730586e-01, 2.645659149e-01, -2.462424934e-01, -3.311266601e-01, 3.549301326e-01, -2.243955992e-02, -1.932174563e-01, 3.004768491e-01, 2.247984558e-01, -1.813887954e-01, -1.486934721e-01, -1.100579351e-01, -1.842073500e-01, 2.552656531e-01, 4.948770255e-02, -2.238268852e-01, -5.491016898e-03, 9.399022907e-02, 1.156099960e-01, -2.105764598e-01, 1.132113114e-01, 1.790278107e-01, 5.713956058e-02, 2.025075555e-01, -2.159493864e-01, -9.501548111e-02, -1.243008971e-01, -3.152435422e-01, 5.920682102e-03, 1.463570744e-01, -2.382500656e-02, 3.553034663e-01, 3.197496533e-01, 1.418770850e-01, -2.112962604e-01, -3.100730777e-01, -1.656394452e-01, 1.509461701e-01, -2.340338081e-01, -4.467840493e-02, 2.219809145e-01, 3.000333160e-02, -2.572786808e-01, -1.347681582e-01, 7.498690858e-03, 9.613123536e-02, -2.888395451e-02, 1.876085848e-01, -4.795604944e-02, -1.620246768e-01, 2.898178995e-01, -2.485429198e-01, 8.165874518e-03, 4.798790812e-02, 4.717399832e-03, -3.517238796e-01, 2.588790953e-01, 2.541467547e-01, 2.976692021e-01, -1.967970282e-01, -1.703324728e-02, -6.502089649e-02, -2.709166110e-01, -1.030686125e-02, 3.484987020e-01, -2.806503177e-01, 2.277130783e-01, -1.517205238e-01, 4.599287640e-03, 1.705918908e-01, 1.584797204e-01, 3.358118236e-01, 2.267032713e-01, -1.551106293e-02, 1.420937777e-01, -2.685554922e-01, 1.320781652e-02, 1.979718804e-01, -1.951669604e-01, 8.337739855e-02, -7.321384549e-02, 4.871632904e-03, 2.742694505e-02, -1.058773622e-01, 5.385825410e-03, -1.571327448e-01, 1.161127388e-01, -1.707696170e-01, -7.401369512e-02, -7.467235625e-02, 1.714584231e-01, -5.070818006e-04, 2.044858038e-01, 1.214536056e-01, 5.744995549e-02, -2.800201178e-01, -1.482310146e-01, 1.646113582e-02, -4.151552450e-03, 6.985203177e-02, 2.845646739e-01, -8.760175109e-02, -1.398831606e-01, 1.138725504e-01, -3.253812790e-01, 3.131965697e-01, -2.852173746e-01, -2.806856632e-01, -1.403073035e-02, 4.879505932e-02, -1.277247816e-01, 3.114890158e-01, 1.428626627e-01, -1.794906333e-02, 2.906278670e-01, -2.327901423e-01, 4.477401730e-03, 1.361441612e-01, 1.125722080e-01, -3.232331574e-01, -3.191867173e-01, 3.029030561e-01, 1.604096964e-02, 2.757167071e-02, 1.023255736e-01, -4.885970801e-02, -1.090495586e-01, -2.362664640e-01, -1.266490668e-01, -6.417112797e-02, -1.889295429e-01, 2.540068626e-01, -3.473660052e-01, 1.547072548e-02, 2.809886336e-01, 2.609134614e-01, -2.150784582e-01, -3.191493154e-01, 2.559865713e-01, -2.020602524e-01, -2.797417939e-01, 3.312879205e-01, 1.974270940e-01, 5.266092345e-02, 7.367957383e-03, 1.334988326e-01, -9.852934629e-02, 1.259483770e-02, 4.562303051e-02, -1.413273662e-01, -8.186616749e-02, -1.847281605e-01, 3.348303437e-01, -2.618510425e-01, -1.427719928e-02, 2.219112366e-01, -1.876574904e-01, 3.522832990e-01, -1.707216799e-01, -1.651211530e-01, 3.152448535e-01, -2.330436260e-01, 3.094043434e-01, 1.141846403e-01, 2.492515892e-01, 1.681452245e-01, -2.718938887e-01, -5.791779980e-02, -2.944867611e-01, 3.132557869e-01, 1.476613432e-01, -1.015613973e-01, -9.864487499e-02, -2.752818167e-01, 2.104223073e-01, 1.392018348e-01, -2.228954434e-01, -5.892864428e-03, -2.102484256e-01, 2.936162353e-01, -3.276805282e-01, 2.484232634e-01, -1.043944731e-01, 2.816552520e-01, 2.375349998e-01, 1.539614946e-01, 1.617600769e-01, -3.542256057e-01, -7.764079422e-02, -1.348124593e-01, 3.254141212e-01, -5.039517209e-02, -2.394552976e-01, -1.398919821e-01, -3.125466704e-01, 2.496081144e-01, 1.559456736e-01, -7.729762048e-02, -9.035775065e-02, -4.616151378e-02, -1.104346737e-01, -2.261028588e-01, 3.662282228e-02, -9.337034076e-02, -1.025404632e-01, -1.631952971e-01, -2.612539828e-01, 2.763406336e-01, -1.760478914e-01, -1.269593686e-01, -3.006798625e-01, 2.993528964e-03, -1.169027612e-01, 1.071920916e-01, 1.876650192e-02, -3.079602122e-01, -7.117691636e-02, -5.715161189e-02, -1.675444543e-01, 2.229025811e-01, 3.016218841e-01, -1.729454100e-02, -8.506272733e-02, -1.026987880e-01, 3.128158450e-01, -2.755395770e-01, -2.382380962e-01, 1.613339186e-01, 2.488294393e-01, 2.156904638e-01, 3.411558270e-01, 2.307786942e-01, 3.089229465e-01, 1.977035701e-01, 2.638651133e-01, 2.955482304e-01, -3.354173899e-01, 3.083024025e-01, 1.604057997e-01, -1.597791761e-01, 1.851276457e-01, -2.834081948e-01, -1.290726066e-01, 7.354331017e-02, 7.960571349e-02, 1.886074990e-01, -2.958855927e-01, -2.954921126e-01, 2.386860363e-02, -5.981037021e-02, -4.464231804e-02, 1.135804206e-01, -3.490822613e-01, -8.273711056e-02, -1.709420085e-01, -7.786481827e-02, 2.340173274e-01, -8.403392881e-02, 3.468478918e-01, 1.370516121e-01, 3.319675028e-01, 2.216824442e-01, -5.734030902e-02, -1.379753649e-01, 2.187774032e-01, -2.475872785e-01, -5.532277375e-02, 2.053312659e-01, 3.157005012e-01, 1.424036920e-01, -2.169010490e-01, 3.380766213e-01, 3.241971433e-01, 2.024863213e-01, -6.907156855e-02, -3.026128709e-01, 1.104225442e-01, -2.025314122e-01, -2.922397256e-01, -8.572954684e-02, -1.144701522e-02, -1.976847053e-01, 2.034342661e-02, -9.513655305e-02, -3.179211169e-02, 3.221721053e-01, -1.304887384e-01, 2.679332793e-01, -1.720006019e-01, 1.291569471e-01, 9.784291498e-03, -5.770643428e-02, 9.314485639e-02, 5.395729095e-03, 3.146816790e-01, -1.449567974e-01, -3.036918938e-01, -3.438697755e-01, -1.201204136e-01, 1.308855228e-02, -2.742069364e-01, 8.296823502e-02, -8.539621532e-02, 1.488382518e-01, 2.770266235e-01, 8.765459806e-02, -1.919670254e-01, 2.096123248e-01, -2.195883393e-01, 2.522764802e-01, 1.111765578e-02, -3.165152967e-01, -1.610281020e-01, -6.617262214e-02, -3.342190683e-01, 1.305033546e-02, 3.396878392e-02, 5.777418241e-02, 2.476828732e-02, 1.465100348e-01, 2.183546722e-01, 2.888148725e-01, -1.669002771e-01, 2.409618050e-01, 3.394354880e-01, -3.163117468e-01, -2.766986489e-01, 2.573454678e-01, -1.888439655e-01, -6.503627449e-02, -9.214011021e-03, -3.187978864e-01, 2.723743618e-01, -3.204689026e-01, -2.109723836e-01, 1.737397313e-01, -1.177452505e-02, 9.974718094e-02, 1.560109109e-01, -8.546110243e-02, 3.935823217e-02, 7.739500701e-02, 3.173844218e-01, 1.123268232e-01, -2.565477192e-01, 1.935080439e-01, 3.245461285e-01, -1.806013137e-01, -1.260700170e-02, 1.190915853e-01, -1.592045575e-01, -1.138971224e-01, 2.543707788e-01, 4.591020942e-02, 3.029673994e-01, -2.858421206e-01, 1.397775412e-01, -5.586888641e-02, 2.569217980e-01, -2.521465719e-01, 5.725611746e-02, -1.424187422e-02, 1.216001883e-01, 1.079749241e-01, 2.881714702e-01, -1.151170060e-01, 1.790190935e-01, -2.008940130e-01, -3.304602802e-01, -1.341172904e-01, -3.057487309e-01, -1.337228566e-01, 3.637176007e-02, -2.980760932e-01, -4.775007814e-02, 3.297356367e-01, 3.188161552e-01, -1.952744573e-01, -1.121417060e-01, -2.660466731e-01, 2.564508840e-02, 1.360995471e-01, 2.826834619e-01, -2.989453971e-01, 7.577989995e-02, 1.951721460e-01, 2.064196765e-01, -7.151460275e-03, -2.226147950e-01, 2.390558273e-01, 2.410356700e-01, 2.419381961e-02, -1.217645481e-01, 2.802515924e-01, -2.768263519e-01, 3.446588218e-01, 3.104324639e-01, 2.947056592e-01, 3.043967485e-01, -3.218134865e-03, 5.265638698e-03, -2.773353830e-03, -1.267527044e-01, 2.710887492e-01, -6.462520361e-02, -2.258807570e-01, 3.128359020e-01, -2.458793968e-01, 3.267241642e-02, 2.642275393e-01, 9.028372914e-02, -7.644689828e-02, 2.445845008e-01, 8.436726779e-02, 2.060640603e-02, -1.014562324e-01, 1.461640298e-01, -2.583485842e-01, 6.500354409e-02, -1.234752983e-01, -2.944616079e-01};
    constexpr std::array<Scalar, 16> convBias_12 = {-3.782687145e-06, 1.433709167e-05, 1.063148943e-06, -4.532542880e-05, 5.287567546e-06, 9.032008165e-06, -2.033933561e-05, 3.387321613e-06, 1.186319787e-05, 9.497832252e-06, 3.534652205e-05, -1.683604387e-05, -1.204362979e-05, 2.676279291e-05, -2.693585884e-05, 3.683920659e-05};

    // Layer 13: Normalization
    constexpr std::array<Scalar, 16> gamma_13 = {1.002766967e+00, 9.923593402e-01, 1.000659108e+00, 9.952317476e-01, 9.867153168e-01, 9.941316843e-01, 1.001785398e+00, 9.890157580e-01, 1.000973463e+00, 1.008292437e+00, 9.892817140e-01, 9.868043661e-01, 1.007562280e+00, 9.917094707e-01, 1.002099156e+00, 9.908827543e-01};
    constexpr std::array<Scalar, 16> beta_13 = {2.978628501e-03, -7.711363025e-03, -3.535548225e-03, -1.378339599e-03, -1.307066996e-02, -3.303579055e-03, -4.200522788e-03, -1.042118017e-02, 2.319302876e-03, 8.374161087e-03, -9.987864643e-03, -1.226944383e-02, 3.090042854e-03, -6.346370094e-03, 6.472054869e-03, -9.934306145e-03};
    constexpr std::array<Scalar, 16> mean_13 = {2.934005484e-02, 1.482789498e-02, -3.191846237e-02, -2.788506821e-02, 2.799674869e-02, -2.668526396e-02, -8.063650131e-02, -4.128929600e-02, 1.080172881e-01, -3.584239259e-02, -6.986764260e-03, 5.082183331e-02, -3.489375114e-02, 4.387101624e-03, -3.185169306e-03, 4.827112705e-02};
    constexpr std::array<Scalar, 16> variance_13 = {8.799379468e-01, 9.562643766e-01, 9.244660139e-01, 9.123009443e-01, 9.158178568e-01, 9.184924364e-01, 8.926036954e-01, 9.058598876e-01, 8.932377100e-01, 9.563727975e-01, 9.673241973e-01, 9.140008092e-01, 9.447312951e-01, 9.023331404e-01, 9.321914315e-01, 9.063448310e-01};
    constexpr Scalar epsilon_13 = 1.000000000e-03;

    // Layer 15: GlobalAveragePooling2D
    // Dense layer 16
    constexpr std::array<Scalar, 80> weights_16 = {1.517443657e-01, 2.785445750e-01, 4.615206644e-02, 7.979323715e-02, -1.138429567e-01, -2.961271107e-01, 1.752665937e-01, 5.205820203e-01, 1.217253432e-01, 2.735929191e-01, 5.294053555e-01, 8.352653682e-02, 2.236377597e-01, 2.099301666e-01, -3.186382949e-01, 3.814174831e-01, -2.015038431e-01, 2.077652365e-01, 2.536315620e-01, -2.005201392e-02, -5.077107549e-01, -8.628889918e-02, 2.762324512e-01, -4.431466162e-01, 1.286340505e-01, 4.229078591e-01, 2.791223349e-03, 5.571493506e-02, -6.905373186e-02, -2.774809003e-01, 4.937256575e-01, 9.400785714e-02, 3.664750457e-01, 1.820525825e-01, 2.417197265e-02, 1.397718042e-01, 2.134389989e-02, 1.243301183e-01, -3.803102672e-01, 2.616551518e-02, 5.265969634e-01, 1.734316647e-01, -4.938784242e-01, -2.656270377e-02, -5.352255702e-01, -4.829972982e-02, 3.254824281e-01, -2.112104446e-01, 2.884367704e-01, 5.250358582e-01, 5.049167871e-01, -2.192240953e-02, 3.021206558e-01, -2.234719396e-01, 4.859125018e-01, -3.970493972e-01, 1.626959145e-01, 1.750659645e-01, -2.490077764e-01, -1.680837125e-01, -3.177359104e-01, 1.859775633e-01, 3.458746076e-01, 5.427152514e-01, 4.015471637e-01, -1.025333777e-01, -3.722833693e-01, 4.764231145e-01, 1.133424491e-01, -3.974485770e-02, 5.099057555e-01, 5.174371600e-01, -5.044046640e-01, 2.060250938e-01, -1.089083329e-01, 2.203913480e-01, -3.845118582e-01, -3.294406342e-04, -3.191950023e-01, 6.470873952e-02};
    constexpr std::array<Scalar, 5> biases_16 = {1.068665180e-03, -6.508363876e-04, -1.096020080e-02, 1.174792089e-02, 4.960375736e-05};


//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 


    auto leakyrelu = +[](Scalar& output, Scalar input, Scalar alpha) noexcept {
        output = input > 0 ? input : alpha * input;
    };

    auto linear = +[](Scalar& output, Scalar input, Scalar alpha) noexcept {
        output = input;
    };

    auto softmax = +[](Scalar *output, Scalar *input, int size) noexcept {
        Scalar max_val = *std::max_element(input, input + size);
        Scalar sum = 0;
        for (int i = 0; i < size; ++i)
        {
            const Scalar exp_val = std::exp(input[i] - max_val);
            output[i] = exp_val;
            sum += exp_val;
        }
        for (int i = 0; i < size; ++i)
        {
            output[i] /= sum;
        }
    };

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 

    // Conv2D call for layer 1
    std::array<Scalar, (8 * 8 * 16)> layer_1_output;
    Conv2D<Scalar, 16, 8, 8>(
        layer_1_output.data(), model_input.data(),
        convKernel_1.data(), convBias_1.data(),
        1, 8, 8,
        3, 3, 1, 1, 1, 1,
        linear, 0.0);

    std::array<Scalar, (8 * 8 * 16)> layer_2_output;
    BatchNormalization2D<Scalar, 16, 8, 8>(
        layer_2_output.data(), layer_1_output.data(),
        gamma_2.data(), beta_2.data(),
        mean_2.data(), variance_2.data(),
        epsilon_2);

    // Pure activation layer 3
    std::array<Scalar, 1024> layer_3_output;
    for (int i = 0; i < 1024; ++i) {
        leakyrelu(layer_3_output[i], layer_2_output[i], 0.1);
    }

    // MaxPooling2D call for layer 4
    std::array<Scalar, (4 * 4 * 16)> layer_4_output;
    MaxPooling2D<Scalar, 2, 2, 2, 2>(
        layer_4_output.data(), layer_3_output.data(), 8, 8, 16);

    // SeparableConv2D call for layer 5
    std::array<Scalar, (4 * 4 * 32)> layer_5_output;
    SeparableConv2D<Scalar, 32, 4, 4>(
        layer_5_output.data(), layer_4_output.data(),
        sepDepthwise_5.data(), sepPointwise_5.data(), sepPointwiseBias_5.data(),
        16, 4, 4,
        3, 3, 1, 1, 1, 1,
        linear, 0.0);

    std::array<Scalar, (4 * 4 * 32)> layer_6_output;
    BatchNormalization2D<Scalar, 32, 4, 4>(
        layer_6_output.data(), layer_5_output.data(),
        gamma_6.data(), beta_6.data(),
        mean_6.data(), variance_6.data(),
        epsilon_6);

    // Pure activation layer 7
    std::array<Scalar, 512> layer_7_output;
    for (int i = 0; i < 512; ++i) {
        leakyrelu(layer_7_output[i], layer_6_output[i], 0.1);
    }

    // MaxPooling2D call for layer 8
    std::array<Scalar, (2 * 2 * 32)> layer_8_output;
    MaxPooling2D<Scalar, 2, 2, 2, 2>(
        layer_8_output.data(), layer_7_output.data(), 4, 4, 32);

    // DepthwiseConv2D call for layer 9
    std::array<Scalar, (2 * 2 * 32)> layer_9_output;
    DepthwiseConv2D(
        layer_9_output.data(), layer_8_output.data(),
        depthwiseKernel_9.data(), depthwiseBias_9.data(),
        32, 2, 2,
        32, 2, 2,
        3, 3, 1, 1, 1, 1,
        linear, 0.0);

    std::array<Scalar, (2 * 2 * 32)> layer_10_output;
    BatchNormalization2D<Scalar, 32, 2, 2>(
        layer_10_output.data(), layer_9_output.data(),
        gamma_10.data(), beta_10.data(),
        mean_10.data(), variance_10.data(),
        epsilon_10);

    // Pure activation layer 11
    std::array<Scalar, 128> layer_11_output;
    for (int i = 0; i < 128; ++i) {
        leakyrelu(layer_11_output[i], layer_10_output[i], 0.1);
    }

    // Conv2D call for layer 12
    std::array<Scalar, (2 * 2 * 16)> layer_12_output;
    Conv2D<Scalar, 16, 2, 2>(
        layer_12_output.data(), layer_11_output.data(),
        convKernel_12.data(), convBias_12.data(),
        32, 2, 2,
        1, 1, 1, 1, 0, 0,
        linear, 0.0);

    std::array<Scalar, (2 * 2 * 16)> layer_13_output;
    BatchNormalization2D<Scalar, 16, 2, 2>(
        layer_13_output.data(), layer_12_output.data(),
        gamma_13.data(), beta_13.data(),
        mean_13.data(), variance_13.data(),
        epsilon_13);

    // Pure activation layer 14
    std::array<Scalar, 64> layer_14_output;
    for (int i = 0; i < 64; ++i) {
        leakyrelu(layer_14_output[i], layer_13_output[i], 0.1);
    }

    // globalAvgPooling2D call for layer 15
    std::array<Scalar, 16> layer_15_output;
    GlobalAvgPooling2D(
        layer_15_output.data(), layer_14_output.data(), 2, 2, 16);

    std::array<Scalar, 5> layer_16_output;
    Dense<Scalar, 5>(
        layer_16_output.data(), layer_15_output.data(),
        weights_16.data(), biases_16.data(),
        16, linear, 0.0);

    // Standalone softmax layer for layer 16
    softmax(layer_16_output.data(), layer_16_output.data(), 5);

    // final placeholder
    std::array<Scalar, 5> model_output = layer_16_output;

    return model_output;
}
