from keras.models import load_model
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import h5py
import os

weights_file_name = "cnn6.h5"
output_folder = "layer_outputs"
os.makedirs(output_folder, exist_ok=True)

model = load_model(weights_file_name)

extractor = keras.Model(inputs=model.inputs, outputs=[layer.output for layer in model.layers])

# data = np.array([
#         [
#             [ [0.1],[0.2],[0.3],[0.4],[0.5],[0.6],[0.7],[0.8] ],
#             [ [1.1],[1.2],[1.3],[1.4],[1.5],[1.6],[1.7],[1.8] ],
#             [ [2.1],[2.2],[2.3],[2.4],[2.5],[2.6],[2.7],[2.8] ],
#             [ [3.1],[3.2],[3.3],[3.4],[3.5],[3.6],[3.7],[3.8] ],
#             [ [4.1],[4.2],[4.3],[4.4],[4.5],[4.6],[4.7],[4.8] ],
#             [ [5.1],[5.2],[5.3],[5.4],[5.5],[5.6],[5.7],[5.8] ],
#             [ [6.1],[6.2],[6.3],[6.4],[6.5],[6.6],[6.7],[6.8] ],
#             [ [7.1],[7.2],[7.3],[7.4],[7.5],[7.6],[7.7],[7.8] ]
#         ]
#     ], dtype='float32')  

data = np.array([
    [
        [ [0.0, 0.093458, 0.186916],
          [0.280374, 0.373832, 0.46729],
          [0.560748, 0.654206, 0.747664],
          [0.841122, 0.934579, 1.028037],
          [1.121495, 1.214953, 1.308411],
          [1.401869, 1.495327, 1.588785] ],
          
        [ [1.682243, 1.775701, 1.869159],
          [1.962617, 2.056075, 2.149533],
          [2.242991, 2.336449, 2.429907],
          [2.523366, 2.616824, 2.710282],
          [2.80374, 2.897198, 2.990656],
          [3.084114, 3.177572, 3.27103] ],
          
        [ [3.364488, 3.457946, 3.551404],
          [3.644862, 3.73832, 3.831778],
          [3.925237, 4.018695, 4.112153],
          [4.205611, 4.299069, 4.392527],
          [4.485985, 4.579443, 4.672901],
          [4.766359, 4.859817, 4.953275] ],
          
        [ [5.046733, 5.140191, 5.233649],
          [5.327107, 5.420565, 5.514023],
          [5.607481, 5.700939, 5.794397],
          [5.887855, 5.981313, 6.074771],
          [6.168229, 6.261687, 6.355145],
          [6.448603, 6.542061, 6.635519] ],
          
        [ [6.728977, 6.822435, 6.915893],
          [7.009351, 7.102809, 7.196267],
          [7.289725, 7.383183, 7.476641],
          [7.570099, 7.663557, 7.757015],
          [7.850473, 7.943931, 8.037389],
          [8.130847, 8.224305, 8.317763] ],
          
        [ [8.411221, 8.504679, 8.598137],
          [8.691595, 8.785053, 8.878511],
          [8.971969, 9.065427, 9.158885],
          [9.252343, 9.345801, 9.439259],
          [9.532717, 9.626175, 9.719633],
          [9.813091, 9.906549, 10.0] ]
    ]
], dtype='float32')


# features = extractor(data)
activations = extractor.predict(data)

for i, activation in enumerate(activations):
    layer_name = model.layers[i].name

    file_name = f"layer_{i}_{layer_name}_output.csv"


    file_path = os.path.join(output_folder, file_name)
    flattened = activation.flatten()
    np.savetxt(file_path, flattened, delimiter=",")
