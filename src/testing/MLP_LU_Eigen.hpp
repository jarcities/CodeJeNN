#pragma once
#include <Eigen/Dense>
#include <Eigen/Core>
#include <iostream>
#include <array>
#include <cmath>
#include <functional>
#include <stdexcept>

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 
// Highly optimized Eigen implementations using expression templates and vectorization
//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 

template <typename Scalar = double>
class MLP_LU_Optimized {
private:
    // Use Eigen's aligned allocator for better performance
    using Vector85 = Eigen::Matrix<Scalar, 85, 1>;
    using Vector1 = Eigen::Matrix<Scalar, 1, 1>;
    using Matrix85x1 = Eigen::Matrix<Scalar, 85, 1>;
    using Matrix1x85 = Eigen::Matrix<Scalar, 1, 85>;
    using Array85 = Eigen::Array<Scalar, 85, 1>;
    using Array1 = Eigen::Array<Scalar, 1, 1>;

    // Pre-computed constants for GELU
    static constexpr Scalar kC0 = 0.044715;
    static constexpr Scalar kSqrt2PiInv = Scalar(0.7978845608028654);
    static constexpr Scalar kHalf = Scalar(0.5);
    static constexpr Scalar kOne = Scalar(1.0);
    static constexpr Scalar epsilon_2 = Scalar(1.000000000e-05);

    // Static data members for better cache locality (initialized once)
    static inline const Matrix85x1 weights_1_{
        (Matrix85x1{} << 
            -1.009859290e-01, 2.029603117e-01, -1.066726960e-02, 1.623080357e-01, 2.197575008e-01, 
            -6.996747939e-02, 1.610578045e-01, -2.345653680e-01, 2.546887621e-01, 1.408618819e-01, 
            1.498298038e-02, 1.511869304e-01, 2.250707104e-01, -1.602741800e-01, -2.457994466e-01, 
            -4.262924938e-02, -2.595162851e-01, -1.597303006e-01, -5.550004790e-02, 6.385727534e-02, 
            -1.583046137e-01, -6.849900630e-02, -1.408366005e-01, 1.620719890e-01, 1.341205822e-01, 
            2.241433586e-01, -1.824349195e-01, -1.379069108e-01, 1.528123174e-01, 4.359769218e-03, 
            -2.023147682e-01, -3.067239655e-02, -5.396125639e-02, -1.920160691e-01, -1.162628833e-01, 
            1.076383775e-01, -2.612010267e-01, -5.835182610e-02, 2.455976663e-01, 7.328775854e-02, 
            -1.223890048e-01, -1.363768377e-01, 1.911317576e-01, -2.619157130e-01, 1.900912620e-01, 
            -1.252809182e-01, 1.190668879e-01, -1.884709296e-01, 2.403222018e-02, -2.644216960e-03, 
            1.678797070e-01, 1.728456785e-01, 2.131817042e-01, -2.505769728e-01, 6.060028513e-02, 
            1.688630801e-01, -1.036742717e-01, -1.957645736e-01, 1.866512141e-01, 1.454443366e-01, 
            -1.184069499e-01, 3.427477716e-02, 1.797312189e-01, 3.224938826e-02, -3.394303092e-02, 
            -1.091594884e-01, 2.180359588e-01, 2.630473225e-01, -1.490482223e-01, 1.885602016e-01, 
            -1.744446924e-01, -1.689552668e-01, 2.284401665e-01, 1.659868392e-02, 9.100938081e-02, 
            8.653241897e-02, -1.095012706e-01, 1.534130515e-01, -4.882091953e-02, 1.951013382e-01, 
            -4.081556965e-02, 1.536100850e-01, -1.325730953e-01, -2.528018098e-01, 5.363376698e-02
        ).finished()
    };

    static inline const Vector1 biases_1_{
        (Vector1{} << -5.753507941e-12).finished()
    };

    static inline const Matrix1x85 weights_4_{
        (Matrix1x85{} << 
            8.904534508e-01, 5.078200901e-18, 5.760520020e-03, -9.854983031e-02, -8.383589649e-02, 
            5.772777397e-01, -8.159466952e-02, -7.787531757e-02, -8.856370348e-01, 8.272292601e-02, 
            -6.127865060e-01, 9.859423653e-01, 2.315289795e-01, 1.144068215e+00, 1.199416286e+00, 
            -8.734742628e-01, -1.609693413e+00, 1.250475082e+00, -1.553230587e+00, -1.175589504e+00, 
            -1.691191145e+00, -6.181057303e-01, -1.727361097e+00, -1.325549368e+00, 6.094438381e-01, 
            1.563427746e+00, 1.433556923e+00, 1.450152192e+00, 1.277051134e+00, 1.567231806e+00, 
            8.421189121e-01, 3.232372182e-01, 1.404822208e+00, 3.286044070e-01, -8.271520353e-01, 
            -1.476907757e+00, -8.863026028e-01, 1.042540915e+00, 1.327849365e+00, 2.456850176e-01, 
            -7.340451413e-01, 1.412275613e+00, -1.537359850e+00, -1.522920153e+00, 1.437303383e+00, 
            -1.571253125e+00, -3.821341636e-01, -1.274624137e+00, 8.513253185e-01, 1.470049079e+00, 
            -6.047290057e-01, 1.587117952e+00, 1.483255065e+00, -1.285657209e+00, 8.634902566e-01, 
            -1.292733582e+00, -1.560551982e+00, 5.659517808e-01, -1.686460201e+00, -1.246560909e+00, 
            1.078969785e+00, 9.533854005e-01, -1.102942618e+00, 1.517082920e+00, 1.427866654e+00, 
            -1.019114771e+00, -6.442797456e-01, -8.793788142e-01, 8.025167546e-01, 3.622636223e-01, 
            3.051766530e-01, -1.571354572e+00, 2.490464563e-01, 8.488342437e-02, 1.376319695e+00, 
            -6.053012111e-01, 1.711343043e-01, -1.043069703e-01, -7.149217936e-03, -4.817985463e-02, 
            1.114669836e-01, -2.176931389e-01, -9.509748122e-02, -4.343494445e-02, 6.874865851e-01
        ).finished()
    };

    static inline const Vector85 biases_4_{
        (Vector85{} << 
            -5.445272498e-01, -6.597817249e-18, 6.148858335e-02, -6.352937406e-02, -1.003901859e-01, 
            -4.284847517e-01, -1.022144877e-01, -1.037738512e-01, 5.675084961e-01, 1.009017413e-01, 
            4.431199612e-01, -6.260823761e-01, -2.637116369e-01, -5.132406186e-01, -7.207088942e-01, 
            5.674628055e-01, 8.294796716e-01, -7.001908215e-01, 8.266691321e-01, 7.033945145e-01, 
            9.308842595e-01, 4.446955580e-01, 9.235122716e-01, 7.710624690e-01, -4.151756121e-01, 
            -7.998469044e-01, -7.938343420e-01, -7.590737247e-01, -7.365747215e-01, -7.919399653e-01, 
            -5.540996529e-01, -3.142521215e-01, -8.141170224e-01, -1.683640158e-01, 4.268517426e-01, 
            8.178208654e-01, 5.514271713e-01, -6.448577050e-01, -7.643146750e-01, -2.634375147e-01, 
            5.235592044e-01, -7.403640784e-01, 8.008795233e-01, 8.017355109e-01, -7.993788921e-01, 
            8.422213015e-01, 3.399252345e-01, 7.312646557e-01, -5.520815163e-01, -7.476489690e-01, 
            3.779664985e-01, -8.077990561e-01, -7.804191288e-01, 7.245221283e-01, -4.987529645e-01, 
            7.602682935e-01, 7.904590979e-01, -4.187707176e-01, 9.009156789e-01, 7.265217706e-01, 
            -6.588102763e-01, -5.955594257e-01, 5.636732771e-01, -7.836272727e-01, -8.204078009e-01, 
            4.612191909e-01, 4.580775159e-01, 6.044925649e-01, -5.858766934e-01, -2.402695099e-02, 
            -2.500083548e-02, 8.060003103e-01, -2.197021772e-01, -2.179599898e-01, -7.360149615e-01, 
            4.384153945e-01, -2.810747255e-01, 2.556862926e-01, -1.993220898e-01, -1.602146637e-01, 
            -2.604875699e-01, 3.105511900e-01, 2.381628915e-01, 1.617542882e-01, -4.737007564e-01
        ).finished()
    };

    // Normalization parameters as Eigen arrays for element-wise operations
    static inline const Array85 input_norm_std_{
        (Array85{} << 
            1.000000000e-16, 1.000000000e-16, 2.699196042e+09, 1.225573460e+09, 3.585557697e+05, 
            2.945345211e+11, 2.268399242e+11, 2.202964040e+11, 2.245129839e+11, 4.785749833e+11, 
            1.767507920e+11, 3.694415689e+13, 2.272483551e+14, 8.308113410e-01, 1.988106695e+06, 
            1.768274764e+06, 1.616055417e+06, 1.779017703e+02, 4.424210472e+06, 4.269940354e+05, 
            7.569700421e+06, 4.052924595e+06, 9.001187697e-01, 1.988108478e+06, 1.630712521e+06, 
            1.363674934e+06, 7.099660926e+05, 3.750293440e+06, 4.269886274e+05, 2.385414749e+07, 
            4.912584057e+06, 1.994398589e-01, 8.981420385e+05, 6.617463497e+05, 1.846904766e+06, 
            7.008693724e+05, 2.204679604e+06, 1.289861854e+05, 7.858080926e+05, 1.553042511e+06, 
            2.517413144e-01, 7.696207163e+01, 2.816978748e+05, 7.362852004e+05, 7.104179469e+05, 
            6.946001647e+05, 6.542859651e+01, 1.952537612e+07, 5.091584868e+03, 1.302251770e+00, 
            2.188139695e+05, 2.948529096e+05, 2.196400471e+06, 7.010350694e+05, 2.570917976e+06, 
            6.841591117e+05, 2.781134037e+07, 3.138461390e+08, 9.946365495e-01, 1.092438460e+06, 
            9.872170376e+05, 7.965732162e+05, 3.881127116e+02, 2.256592712e+06, 5.555667734e+05, 
            9.377280524e+06, 3.160177987e+08, 5.059059085e-03, 7.284679955e+01, 3.109994738e+03, 
            8.571206846e+02, 1.166401262e+04, 7.061261057e+03, 1.137319210e+02, 3.630818335e+07, 
            3.201108209e+08, 4.701282463e-03, 4.633427833e+00, 6.201303376e+01, 5.208729819e+01, 
            1.283541415e-01, 6.610950526e+03, 1.793710801e+02, 4.093875414e+06, 3.205435036e+08
        ).finished()
    };

    static inline const Array85 input_min_mean_{
        (Array85{} << 
            1.000000000e+07, 1.000000000e+07, 5.193701600e+09, 2.320363673e+09, 1.079035772e+07, 
            -5.642217886e+11, 6.602699036e+11, 1.195565605e+11, 5.172801725e+11, -3.703384732e+12, 
            3.451709759e+11, -9.045821782e+13, -3.194809897e+14, -1.026887167e+00, 1.377799693e+07, 
            -2.895859241e+06, 5.292719737e+06, 2.032669319e+02, 2.959405476e+06, -8.156360346e+05, 
            -1.828587162e+07, -9.273672690e+06, 1.651242366e+00, -3.777999288e+06, 1.376581281e+07, 
            -6.981430077e+06, 1.616272685e+06, -4.529014644e+06, 8.156297585e+05, 5.723225405e+07, 
            1.155627815e+07, 5.843209498e-03, 1.721045000e+06, -2.151761742e+06, 1.824085827e+07, 
            -1.590914028e+06, -4.233968955e+06, 2.209057257e+05, 1.586600862e+06, 3.222272971e+06, 
            6.285813221e-01, 9.437268313e+01, 8.447428861e+05, -1.692377185e+06, 1.161704042e+07, 
            -1.600127699e+06, 5.806498943e+01, -4.402790013e+07, 7.263390460e+03, -2.943621933e+00, 
            3.357977044e+05, -1.090183711e+06, -6.113345739e+06, -1.591159043e+06, 2.623538313e+07, 
            -1.257718969e+06, -6.221931519e+07, 4.259891371e+08, 1.671925162e+00, -2.056842762e+06, 
            1.559905030e+06, 1.253809284e+06, 3.229240400e+02, -8.815987349e+06, 1.103682059e+07, 
            -1.910541493e+07, -4.337766141e+08, 6.387358409e-03, -8.274805722e+01, -3.724295439e+03, 
            1.716152376e+03, -2.616572849e+04, 8.032254794e+03, 1.561446281e+02, 9.802429617e+07, 
            -4.440044982e+08, -2.041951975e-03, -1.162464279e+01, 1.604255538e+00, 8.817133054e-01, 
            -1.824039574e-02, -6.183407352e+02, -2.176810422e+02, -4.127333019e+06, 4.562798139e+08
        ).finished()
    };

    static inline const Array85 output_norm_std_{
        (Array85{} << 
            2.698099241e+09, 1.000000000e-16, 1.360113272e-01, 7.290339559e-02, 2.067187864e+06, 
            8.415143423e+08, 1.058928678e+11, 8.043731986e+10, 6.048636129e+08, 9.618811632e+11, 
            5.021911140e+08, 8.817091838e+10, 6.473283789e+11, 4.983159985e-05, 1.938723542e+06, 
            1.708468495e+06, 1.628213640e+06, 4.166804763e+04, 4.650544217e+06, 3.972900846e+05, 
            1.311152054e+07, 3.940110523e+07, 4.749758191e-05, 1.205644031e-01, 9.008179545e+05, 
            1.239138828e+06, 6.724312708e+05, 4.015256189e+06, 2.400146283e+05, 2.744514515e+07, 
            3.654291018e+07, 1.267489856e-05, 5.725563465e-02, 2.075649334e-02, 1.372896094e+06, 
            6.081549860e+05, 1.783669229e+06, 2.349116128e+05, 7.186415731e+06, 2.108743302e+07, 
            2.801450101e-05, 1.017534390e-03, 2.708712737e-02, 5.817627235e-02, 5.952357928e+05, 
            1.436511234e+06, 8.927348095e+03, 1.792043965e+07, 1.153460472e+07, 6.679816340e-05, 
            7.983191316e-03, 2.615128917e-02, 1.142995679e-01, 7.075292680e-02, 1.375352150e+06, 
            4.854338910e+05, 3.793151204e+07, 2.468397973e+08, 4.754860844e-05, 6.345213516e-02, 
            3.917690573e-02, 7.482902599e-02, 1.883284556e-03, 1.353524450e-01, 2.237879655e+05, 
            1.486755607e+07, 2.099654335e+08, 2.941858653e-07, 2.337541398e-05, 2.677625029e-04, 
            1.620542530e-04, 1.007268423e-03, 4.499516690e-04, 3.705379793e-05, 3.629958072e+07, 
            3.199787182e+08, 1.770991055e-07, 2.344877583e-05, 1.667212969e-05, 1.824947319e-05, 
            2.414205974e-05, 3.345740600e-04, 3.533121121e-05, 3.286993798e-02, 2.909947461e+08
        ).finished()
    };

    static inline const Array85 output_min_mean_{
        (Array85{} << 
            5.194271710e+09, 1.000000000e+07, -7.060437424e-03, -4.345204434e-01, 3.313358789e+05, 
            1.196833998e+09, 1.669418380e+10, 1.341793233e+10, -1.047219969e+09, -1.566718909e+11, 
            -7.292051093e+08, 1.813328742e+11, 7.203278109e+11, 4.369409514e-05, 1.370554761e+07, 
            -2.823248859e+06, 5.303702824e+06, 6.323011614e+04, 2.626483312e+06, -7.714603998e+05, 
            -2.891469499e+07, -5.282128498e+07, -7.951535687e-05, -2.509400389e-01, 1.275295588e+07, 
            -5.736156457e+06, 1.541342586e+06, -3.844521726e+06, 5.092583172e+05, 6.493670374e+07, 
            5.626524899e+07, 3.144379795e-06, 1.178434785e-01, -1.345160738e-01, 1.686567884e+07, 
            -1.389276309e+06, -4.791821253e+06, 4.034844034e+05, 1.447916948e+07, 2.313506187e+07, 
            -3.603955638e-05, 2.408058109e-03, 6.503923786e-02, -7.761618482e-02, 1.135875945e+07, 
            -1.488032668e+06, -4.453174487e+03, -4.012164927e+07, 1.832750808e+07, 1.466378762e-04, 
            1.034948481e-02, -6.804218321e-02, -3.812274185e-01, -1.585203713e-01, 2.269952403e+07, 
            -9.490773225e+05, -8.891404780e+07, 3.361235565e+08, -7.715883217e-05, -1.330282380e-01, 
            7.311008808e-02, 1.333921450e-01, 1.506439074e-04, -3.247195464e-01, 1.046947332e+07, 
            -3.873063203e+07, -2.960232188e+08, -3.512671432e-07, 2.026860565e-05, -3.239873404e-04, 
            -2.348689318e-05, -2.257383512e-03, 1.447322702e-04, 2.469458129e-05, 9.801685728e+07, 
            -4.437921553e+08, 7.911338681e-08, -1.069169766e-05, 8.832567378e-06, 9.113200621e-06, 
            1.038304821e-05, -4.785943738e-05, -2.234954521e-05, -3.585501508e-02, 4.301550828e+08
        ).finished()
    };

public:
    // Ultra-optimized forward pass using Eigen expression templates
    static std::array<Scalar, 85> forward(const std::array<Scalar, 85>& initial_input) {
        // Map input to Eigen array for vectorized operations
        const Eigen::Map<const Array85> input_map(initial_input.data());
        
        // Vectorized input normalization (single expression)
        const Array85 normalized_input = (input_map - input_min_mean_) / input_norm_std_;
        
        // Convert to vector for linear algebra operations
        const Vector85 model_input = normalized_input.matrix();
        
        // Dense layer 1: vectorized dot product
        const Scalar layer_1_scalar = weights_1_.dot(model_input) + biases_1_(0);
        
        // Unit normalization (layer 2) - optimized for scalar case
        const Scalar layer_2_scalar = layer_1_scalar / (std::abs(layer_1_scalar) + epsilon_2);
        
        // GELU activation (layer 3) - optimized for scalar case
        const Scalar x3 = layer_2_scalar * layer_2_scalar * layer_2_scalar;
        const Scalar y = kSqrt2PiInv * (layer_2_scalar + kC0 * x3);
        const Scalar layer_3_scalar = kHalf * layer_2_scalar * (kOne + std::tanh(y));
        
        // Dense layer 4: vectorized matrix-vector multiplication
        const Vector85 layer_4_output = weights_4_.transpose() * layer_3_scalar + biases_4_;
        
        // Vectorized output denormalization (single expression)
        const Array85 final_output = layer_4_output.array() * output_norm_std_ + output_min_mean_;
        
        // Copy to output array
        std::array<Scalar, 85> result;
        Eigen::Map<Array85>(result.data()) = final_output;
        
        return result;
    }
};

// Convenience function for the optimized implementation
template <typename Scalar = double>
inline auto MLP_LU_Ultra_Optimized(const std::array<Scalar, 85>& initial_input) {
    return MLP_LU_Optimized<Scalar>::forward(initial_input);
}

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 
// Enhanced benchmark function
//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 

#include <chrono>

template<typename Scalar>
void benchmark_all_implementations(const std::array<Scalar, 85>& test_input, int iterations = 10000) {
    using namespace std::chrono;
    
    // Warm up
    for (int i = 0; i < 100; i++) {
        auto result1 = MLP_LU(test_input);
        auto result2 = MLP_LU_Eigen(test_input);
        auto result3 = MLP_LU_Ultra_Optimized(test_input);
        (void)result1; (void)result2; (void)result3;
    }
    
    // Benchmark original implementation
    auto start = high_resolution_clock::now();
    for (int i = 0; i < iterations; i++) {
        auto result = MLP_LU(test_input);
        (void)result;
    }
    auto end = high_resolution_clock::now();
    auto original_time = duration_cast<microseconds>(end - start);
    
    // Benchmark basic Eigen implementation
    start = high_resolution_clock::now();
    for (int i = 0; i < iterations; i++) {
        auto result = MLP_LU_Eigen(test_input);
        (void)result;
    }
    end = high_resolution_clock::now();
    auto eigen_time = duration_cast<microseconds>(end - start);
    
    // Benchmark ultra-optimized implementation
    start = high_resolution_clock::now();
    for (int i = 0; i < iterations; i++) {
        auto result = MLP_LU_Ultra_Optimized(test_input);
        (void)result;
    }
    end = high_resolution_clock::now();
    auto ultra_time = duration_cast<microseconds>(end - start);
    
    std::cout << "Performance comparison (" << iterations << " iterations):\n";
    std::cout << "Original implementation:      " << original_time.count() << " μs\n";
    std::cout << "Basic Eigen implementation:   " << eigen_time.count() << " μs\n";
    std::cout << "Ultra-optimized Eigen:        " << ultra_time.count() << " μs\n";
    std::cout << "Basic Eigen speedup:          " << static_cast<double>(original_time.count()) / eigen_time.count() << "x\n";
    std::cout << "Ultra-optimized speedup:      " << static_cast<double>(original_time.count()) / ultra_time.count() << "x\n";
    
    // Verify results match
    auto result1 = MLP_LU(test_input);
    auto result2 = MLP_LU_Eigen(test_input);
    auto result3 = MLP_LU_Ultra_Optimized(test_input);
    
    Scalar max_diff_basic = 0;
    Scalar max_diff_ultra = 0;
    for (int i = 0; i < 85; i++) {
        max_diff_basic = std::max(max_diff_basic, std::abs(result1[i] - result2[i]));
        max_diff_ultra = std::max(max_diff_ultra, std::abs(result1[i] - result3[i]));
    }
    std::cout << "Max difference (basic Eigen):  " << max_diff_basic << "\n";
    std::cout << "Max difference (ultra-opt):    " << max_diff_ultra << "\n";
}
