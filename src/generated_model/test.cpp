#include <iostream>
#include <array>
#include <iomanip>  // for std::setprecision
#include "cnn6.h"  // Your generated header with cnn2(...) definition

using Scalar = double;

int main() {
    // Corrected initializer with proper brace nesting.
    // std::array<std::array<std::array<Scalar, 3>, 6>, 6> input = {{
    //     {{
    //         { {0.1, 0.2, 0.3}, {0.4, 0.5, 0.6}, {0.7, 0.8, 0.9},
    //           {1.0, 1.1, 1.2}, {1.3, 1.4, 1.5}, {1.6, 1.7, 1.8} }
    //     }},
    //     {{
    //         { {2.1, 2.2, 2.3}, {2.4, 2.5, 2.6}, {2.7, 2.8, 2.9},
    //           {3.0, 3.1, 3.2}, {3.3, 3.4, 3.5}, {3.6, 3.7, 3.8} }
    //     }},
    //     {{
    //         { {4.1, 4.2, 4.3}, {4.4, 4.5, 4.6}, {4.7, 4.8, 4.9},
    //           {5.0, 5.1, 5.2}, {5.3, 5.4, 5.5}, {5.6, 5.7, 5.8} }
    //     }},
    //     {{
    //         { {6.1, 6.2, 6.3}, {6.4, 6.5, 6.6}, {6.7, 6.8, 6.9},
    //           {7.0, 7.1, 7.2}, {7.3, 7.4, 7.5}, {7.6, 7.7, 7.8} }
    //     }},
    //     {{
    //         { {8.1, 8.2, 8.3}, {8.4, 8.5, 8.6}, {8.7, 8.8, 8.9},
    //           {9.0, 9.1, 9.2}, {9.3, 9.4, 9.5}, {9.6, 9.7, 9.8} }
    //     }},
    //     {{
    //         { {10.1, 10.2, 10.3}, {10.4, 10.5, 10.6}, {10.7, 10.8, 10.9},
    //           {11.0, 11.1, 11.2}, {11.3, 11.4, 11.5}, {11.6, 11.7, 11.8} }
    //     }}
    // }};

    // Example for a 3D array input[6][6][3]
    std::array<std::array<std::array<Scalar, 3>, 6>, 6> input = {{
        {{
            {0.0f,      0.093458f, 0.186916f},
            {0.280374f, 0.373832f, 0.46729f},
            {0.560748f, 0.654206f, 0.747664f},
            {0.841122f, 0.934579f, 1.028037f},
            {1.121495f, 1.214953f, 1.308411f},
            {1.401869f, 1.495327f, 1.588785f}
        }},
        {{
            {1.682243f, 1.775701f, 1.869159f},
            {1.962617f, 2.056075f, 2.149533f},
            {2.242991f, 2.336449f, 2.429907f},
            {2.523366f, 2.616824f, 2.710282f},
            {2.80374f,  2.897198f, 2.990656f},
            {3.084114f, 3.177572f, 3.27103f}
        }},
        {{
            {3.364488f, 3.457946f, 3.551404f},
            {3.644862f, 3.73832f,  3.831778f},
            {3.925237f, 4.018695f, 4.112153f},
            {4.205611f, 4.299069f, 4.392527f},
            {4.485985f, 4.579443f, 4.672901f},
            {4.766359f, 4.859817f, 4.953275f}
        }},
        {{
            {5.046733f, 5.140191f, 5.233649f},
            {5.327107f, 5.420565f, 5.514023f},
            {5.607481f, 5.700939f, 5.794397f},
            {5.887855f, 5.981313f, 6.074771f},
            {6.168229f, 6.261687f, 6.355145f},
            {6.448603f, 6.542061f, 6.635519f}
        }},
        {{
            {6.728977f, 6.822435f, 6.915893f},
            {7.009351f, 7.102809f, 7.196267f},
            {7.289725f, 7.383183f, 7.476641f},
            {7.570099f, 7.663557f, 7.757015f},
            {7.850473f, 7.943931f, 8.037389f},
            {8.130847f, 8.224305f, 8.317763f}
        }},
        {{
            {8.411221f, 8.504679f, 8.598137f},
            {8.691595f, 8.785053f, 8.878511f},
            {8.971969f, 9.065427f, 9.158885f},
            {9.252343f, 9.345801f, 9.439259f},
            {9.532717f, 9.626175f, 9.719633f},
            {9.813091f, 9.906549f, 10.0f}
        }}
    }};
    

    // Pass the input to your generated CNN function
    auto output = cnn6<Scalar>(input);

    // Print the results with high precision
    std::cout << std::scientific << std::setprecision(15);  // Set precision and scientific notation
    std::cout << "Output:\n";  // Print each value on a new line
    for(const auto& val : output) {
        std::cout << val << '\n';
    }
    std::cout << std::endl;

    return 0;
}

/*
Compile and run:
clang++ -std=c++23 -Wall -O3 -march=native -o test test.cpp
./test
*/