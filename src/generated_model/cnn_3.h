#pragma once
#include <iostream>
#include <array>
#include <random>
#include <cmath>
#include <functional>
#include <stdexcept>
#include <algorithm> 
#include <cstddef> 

// template<typename Scalar>
// using activationFunction = void(*)(Scalar&, Scalar, Scalar);


//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 


template<typename Scalar, int N>
void Reshape(Scalar * __restrict outputs, const Scalar * __restrict inputs) noexcept {
    #pragma omp simd
    #pragma unroll
    for (int i = 0; i < N; ++i) {
        outputs[i] = inputs[i];
    }
}   

template <typename Scalar, int out_channels, int out_height, int out_width, typename ActivationFunc>
__attribute__((hot))
void Conv2D(Scalar * __restrict outputs, const Scalar * __restrict inputs, 
            const Scalar *__restrict weights, const Scalar *__restrict biases, 
            int in_channels, int in_height, int in_width, 
            int kernel_height, int kernel_width, 
            int stride_height, int stride_width, 
            int padding_height, int padding_width, 
            ActivationFunc activation_function, Scalar alpha) noexcept {
    
    const int input_row_stride = in_width * in_channels;
    const int output_row_stride = out_width * out_channels;
    const int weights_per_khkw = in_channels * out_channels;  
    const int weights_per_kh = kernel_width * weights_per_khkw;

    #pragma omp parallel for collapse(2)
    for (int oh = 0; oh < out_height; ++oh) {
        for (int ow = 0; ow < out_width; ++ow) {
            Scalar sum_buf[out_channels];
            
            // Initialize sum buffer with biases
            for (int oc = 0; oc < out_channels; ++oc) {
                sum_buf[oc] = biases[oc];
            }

            const int h_origin = oh * stride_height - padding_height;
            const int w_origin = ow * stride_width - padding_width;

            const int kh_min = std::max(0, -h_origin);
            const int kh_max = std::min(kernel_height, in_height - h_origin);
            const int kw_min = std::max(0, -w_origin);
            const int kw_max = std::min(kernel_width, in_width - w_origin);

            // Compute convolution
            for (int kh = kh_min; kh < kh_max; ++kh) {
                const int in_h = h_origin + kh;
                const int input_row_offset = in_h * input_row_stride;
                const int weight_kh_offset = kh * weights_per_kh;

                for (int kw = kw_min; kw < kw_max; ++kw) {
                    const int in_w = w_origin + kw;
                    const int input_base = input_row_offset + in_w * in_channels;
                    const int weight_base = weight_kh_offset + (kw * weights_per_khkw);

                    #pragma clang loop vectorize(enable)
                    for (int ic = 0; ic < in_channels; ++ic) {
                        const Scalar input_val = inputs[input_base + ic];
                        const Scalar *w_ptr = weights + weight_base + ic * out_channels;

                        for (int oc = 0; oc < out_channels; ++oc) {
                            sum_buf[oc] += input_val * w_ptr[oc];
                        }
                    }
                }
            }

            Scalar *out_pixel_ptr = outputs + ((oh * out_width + ow) * out_channels);
            for (int oc = 0; oc < out_channels; ++oc) {
                activation_function(out_pixel_ptr[oc], sum_buf[oc], alpha);
            }
        }
    }
}

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 


template <typename Scalar = double>
auto cnn_3(const std::array<std::array<Scalar, 96>, 96>& initial_input) {

    constexpr int flat_size = 9216; 
    std::array<Scalar, flat_size> model_input;
    #pragma omp simd
    for (int i0 = 0; i0 < 96; i0++) {
      for (int i1 = 0; i1 < 96; i1++) {
            int flatIndex = i0 * 96 + i1 * 1;
            model_input[flatIndex] = initial_input[i0][i1];
        }
    }
    if (model_input.size() != 9216) { throw std::invalid_argument("Invalid input size. Expected size: 9216"); }


//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 


    // Layer 1: Conv2D
    constexpr std::array<Scalar, 144> convKernel_1 = {-9.977933019e-02, 1.820342690e-01, 1.019520611e-01, -9.664159268e-02, 1.055045873e-01, -7.887999713e-02, 2.959485352e-02, 1.887655258e-02, -4.760271311e-02, -4.570731521e-02, -2.005675435e-02, 9.653900564e-02, 1.207723767e-01, 2.660872042e-02, -1.643338799e-01, 1.390780360e-01, -1.268621683e-01, 4.265078902e-02, 1.675814539e-01, -1.015966907e-01, 1.954283565e-01, 1.277919561e-01, -8.574273437e-02, 1.606397331e-02, -5.273991823e-02, 7.149432600e-02, 7.112605870e-02, -1.166121289e-01, -1.094548330e-01, 1.774862558e-01, 1.912332624e-01, -1.519684643e-01, -1.336885095e-01, 1.878193021e-02, 8.478926122e-02, -1.531871408e-01, -7.957508415e-02, -1.746103615e-01, -9.100042284e-02, -1.814378798e-02, 1.693837345e-02, 1.430896968e-01, -9.131921083e-02, 1.910020560e-01, 7.661987841e-02, 7.688723505e-02, -2.338548005e-02, -3.134027123e-02, 7.465122640e-02, -1.406701207e-01, 9.143082798e-02, -1.344307959e-01, 1.671898514e-01, 4.101175070e-02, 1.310325712e-01, 1.271224171e-01, 1.061914116e-01, 1.118242294e-01, -1.979888529e-01, 8.369044960e-02, -1.238940731e-01, -4.257595539e-02, 2.265304327e-02, 1.810802370e-01, -6.346234679e-02, 3.378906846e-02, -3.042054176e-02, 3.644220531e-02, -1.576043814e-01, -1.568055749e-01, 1.777863353e-01, 1.820081472e-02, 5.726508796e-02, -9.990308434e-02, 1.741897315e-01, 1.297332495e-01, -1.745985150e-01, 5.209304392e-02, -1.430421919e-01, 1.561880112e-03, -9.404270351e-02, -1.950166821e-01, -1.614330560e-01, -7.346163690e-02, -1.558732837e-01, 7.525251806e-02, -1.042546928e-01, 8.252312243e-02, 1.431719959e-02, -1.109189838e-01, -5.141934752e-02, -1.710214913e-01, 1.692427546e-01, -4.540090263e-02, -1.272493899e-01, 1.772058159e-01, -8.206944168e-02, 1.037696749e-01, 2.371795475e-02, 9.598343074e-02, -1.432914436e-01, -9.072993696e-02, -8.308780193e-02, -4.270705581e-02, 8.722633123e-03, 1.279420108e-01, 1.915306002e-01, 8.334030211e-02, 1.370045394e-01, 1.610264927e-01, -1.457074732e-01, -9.063121676e-02, -1.782888472e-01, -1.229338422e-01, -3.999608755e-02, 1.271888167e-01, -3.249123693e-03, 1.892586797e-01, -2.892239392e-02, -1.353553981e-01, 5.815975368e-02, -1.953732073e-01, -1.523723751e-01, -1.570394188e-01, -3.607080877e-02, 1.475773901e-01, -1.099654958e-01, 1.655672938e-01, 1.955658346e-01, -1.821576953e-01, -1.036282107e-01, 1.291891485e-01, -1.055464670e-01, -1.682698727e-01, -1.261906922e-01, 1.129690260e-01, 1.669341773e-01, -8.790286630e-02, -5.271640420e-02, -1.702471823e-01, 1.164923161e-01, -1.865251213e-01, -1.760771871e-02, -8.301287144e-02};
    constexpr std::array<Scalar, 16> convBias_1 = {-7.264399195e-24, 7.901216627e-24, 7.168425589e-24, -4.123682818e-24, -3.578843807e-24, -5.124324872e-24, 2.734225227e-24, -8.863936165e-24, -1.216100398e-23, -1.455678718e-24, -1.901425558e-24, -7.420909199e-24, -2.128822011e-24, 9.590594205e-25, -8.657836787e-24, -3.518818197e-24};

    // Layer 2: Conv2D
    constexpr std::array<Scalar, 1152> convKernel_2 = {1.563498527e-01, -1.268672645e-01, 1.295959949e-02, -1.354943514e-01, 1.379817277e-01, 6.747710705e-02, -4.016415775e-02, 5.516226590e-02, 1.635605246e-01, -6.460436434e-02, -6.047074497e-02, 1.361830980e-01, 1.403831691e-01, -7.075802982e-02, 3.923082352e-02, -7.577538490e-03, 2.966825664e-02, 4.632456601e-02, -1.751740277e-02, -1.274857968e-01, 4.031331837e-02, 3.444965184e-02, -1.611065567e-01, -1.023170575e-01, -2.250079811e-02, 1.097337157e-01, -1.403750181e-01, 6.562523544e-02, -1.449642181e-01, -1.379268169e-01, 2.402812243e-04, -2.796018124e-02, -2.965076268e-02, 1.503567845e-01, 5.782301724e-02, 2.199621499e-02, -1.378076971e-01, 1.599394828e-01, -8.422449231e-03, 1.532077938e-01, -4.267930984e-02, 7.410316169e-02, 8.849395812e-02, 9.218187630e-02, -5.753362179e-02, -8.803042024e-02, -6.391938776e-02, 1.424865872e-01, 1.394845992e-01, 9.108383954e-02, 8.164744079e-02, 6.047174335e-03, -3.643091023e-02, -4.630319774e-02, 1.128959209e-01, 6.563241780e-02, 2.900750935e-02, -1.498449743e-01, -9.224727750e-03, 2.801151574e-02, 1.435417384e-01, 9.516911209e-02, -1.113879681e-02, -9.654700756e-02, 4.717683792e-02, -2.927887440e-02, -1.082034111e-01, 1.560322195e-01, -1.646794528e-01, 1.407924145e-01, -7.413606346e-02, -8.178143203e-02, 1.550143212e-01, -3.434042633e-02, 1.195766479e-01, -1.268101633e-01, -5.960266292e-02, -1.356442869e-01, 1.546435803e-01, -3.456206620e-02, 1.316574365e-01, -1.628904045e-01, -1.616662443e-01, 1.408219337e-03, 1.222646385e-01, -3.350305557e-02, -1.328394115e-01, 5.203151703e-02, -7.516890764e-04, -2.683059871e-02, -1.381437480e-02, 1.284472495e-01, -1.197135076e-01, -1.311562061e-01, -7.628405094e-02, 1.662052125e-01, 8.527930081e-02, -6.396226585e-02, 6.410193443e-02, 9.335805476e-02, -9.269754589e-02, -4.234838486e-02, 1.399046630e-01, 1.193995923e-01, -1.286540031e-01, -1.005828381e-01, -2.996139228e-02, 8.391837776e-02, 1.247555166e-01, 7.427234948e-02, -1.095360965e-01, 1.005448252e-01, 4.142969847e-04, -1.331611574e-01, -6.750063598e-02, -1.478765011e-01, -1.036387309e-01, 1.442575902e-01, -3.875656426e-02, -7.208093256e-02, 2.632801235e-02, -1.325566471e-01, -4.164725542e-04, -9.813383222e-03, 9.995485842e-02, 6.374366581e-02, -8.157205582e-02, -9.758623689e-02, 8.066157997e-02, -1.712425053e-02, -7.567556947e-02, 5.380392075e-02, -7.446214557e-03, 1.657954603e-01, -1.077921689e-02, -9.490148723e-02, -1.548477411e-01, 3.796999156e-02, 9.232594073e-02, -1.162083447e-02, 6.414282322e-02, -9.532856941e-02, 8.861641586e-02, 7.780273259e-02, -1.042559147e-01, -2.860109508e-02, 4.300117493e-02, -9.993755817e-02, -1.038860530e-01, -1.006809920e-01, 3.066067398e-02, 7.188200951e-02, -2.015984058e-02, 4.017798603e-02, -1.037047729e-01, 4.170338809e-02, -1.284620464e-01, 1.345527619e-01, -1.173545569e-01, 1.066996306e-01, 4.688620567e-02, -8.906706423e-02, 7.898283005e-02, -4.168757051e-02, 4.749889672e-02, -4.477903247e-03, -1.553756893e-01, -6.147599220e-02, 1.451902837e-01, -9.084864706e-02, -8.821050823e-02, 3.635640442e-02, 3.174690902e-02, 1.438102871e-01, 6.858646870e-02, -4.033716023e-02, 1.013006419e-01, 3.604781628e-02, 3.522753716e-02, -6.258463860e-02, -6.019946188e-02, 7.826189697e-02, -1.386098564e-02, -1.565605104e-01, -8.846633136e-02, -1.616477221e-01, -5.143352598e-02, 6.966960430e-02, -2.648170292e-02, -4.735112190e-03, -1.459080875e-01, 1.490779668e-01, 1.477216631e-01, -8.531801403e-02, 8.493353426e-02, -1.592638493e-01, 9.491141140e-02, -5.218744278e-02, 1.537256986e-01, 5.905251205e-02, -7.470782846e-02, -1.333392859e-01, 1.113867015e-01, -2.093359828e-03, 1.639409214e-01, -1.031334698e-02, -6.809254736e-02, -8.633451164e-02, 6.307931244e-02, -1.075598449e-01, 1.166070849e-01, -1.234219074e-01, 1.110914499e-01, 3.712153435e-02, -1.128115281e-01, 3.594756126e-02, -2.403891087e-02, 5.936877429e-02, -1.194120273e-01, 1.515423805e-01, -5.410580337e-02, -1.117033958e-01, 6.705169380e-02, 1.099195629e-01, 1.456625909e-01, -1.651237011e-01, 8.112514019e-02, -4.162482917e-02, -7.042583078e-02, -1.651881933e-01, 5.879569054e-02, 1.593103558e-01, 3.354056180e-02, -1.409201324e-01, 1.066961437e-01, 4.468536377e-02, 1.643991619e-01, 4.623007774e-02, -1.263029277e-01, -1.648871899e-01, 2.235193551e-02, -1.428450048e-01, 5.435197055e-02, 1.386349350e-01, 9.506978095e-02, -1.617540568e-01, 8.332514763e-02, -1.634346247e-01, 4.741227627e-02, 3.554682434e-02, -7.431213558e-02, -1.219020709e-01, -1.285934895e-01, 4.276782274e-04, 1.277873963e-01, -5.144425482e-02, -1.419695318e-01, -9.406261146e-02, 1.214598864e-01, 1.630532742e-02, -8.482813835e-02, -6.307649612e-02, -8.553811163e-02, 1.534724236e-02, 5.635142326e-02, -5.953371525e-02, 1.557559520e-01, -6.527420133e-02, 1.350051612e-01, -5.461888015e-02, -1.814568043e-02, 3.116881847e-02, -1.256316602e-01, 1.119516641e-01, 9.643842280e-02, -5.877785385e-02, 1.404262334e-01, -4.712417722e-03, -7.508799434e-03, 7.971882820e-02, 5.831615627e-02, -1.064548492e-01, -7.487380505e-02, 1.632982045e-01, -1.333267689e-01, 1.615337580e-01, -2.250771224e-02, 7.799129188e-02, -1.007947177e-01, 1.298642159e-02, 9.139068425e-02, -1.048121080e-01, -6.342896074e-02, 2.845208347e-02, 1.108335406e-01, 8.944089711e-02, -1.402322501e-01, -7.873937488e-03, 2.385075390e-02, -6.366980076e-02, -1.362093687e-01, 6.241650879e-02, -5.526228994e-02, -3.240446746e-02, -1.427483261e-01, -1.109188423e-01, -1.498299539e-01, -5.773191154e-02, 7.043878734e-02, -2.060361207e-02, 1.166970879e-01, -8.810913563e-02, 7.205083966e-03, 8.208744228e-02, -8.628439903e-02, -8.891721815e-02, 3.410518169e-02, 8.462454379e-02, 1.036791503e-02, 1.372884959e-01, -1.019257307e-01, -9.424241632e-02, -9.566819668e-02, -1.322034597e-01, -8.739873022e-02, -4.718260467e-02, 1.617536694e-01, -9.947216511e-02, -1.225479469e-01, -9.119804949e-02, -5.654831976e-02, 6.975650787e-02, -3.519658744e-02, 1.035198420e-01, -1.496094465e-01, -1.608511209e-01, 7.690052688e-02, 7.452833652e-02, 1.255208403e-01, -2.242743969e-02, 1.319130808e-01, -1.185168028e-01, -1.109994277e-01, -9.091397375e-02, -7.010646909e-02, 1.077616364e-01, 5.330868065e-02, -4.058937728e-02, 1.617382020e-01, -7.297949493e-02, 4.150316119e-03, -3.898437321e-02, 9.370805323e-02, -7.617159933e-02, 1.105980575e-02, 1.303364187e-01, 1.078447849e-01, 7.225847244e-02, -4.146862030e-02, -1.466681212e-01, -1.124467105e-01, 4.143376648e-02, -7.670097053e-02, 1.218331605e-01, -1.683843136e-02, 1.619581729e-01, -3.245234489e-03, -1.568063200e-01, -1.286850870e-01, -1.154420823e-01, -1.396719217e-01, -7.817208767e-02, -1.271684170e-01, 1.366063505e-01, 9.067113698e-02, 8.368690312e-02, -1.381801367e-01, -5.549757183e-02, -1.316405237e-01, -1.420619488e-01, -4.427425563e-02, 1.199171990e-01, -7.949217409e-02, -4.546062648e-02, 6.273829937e-02, -5.599260330e-02, 7.092311978e-03, 1.414915472e-01, 1.441519707e-01, 1.187665612e-01, -1.434699297e-01, 8.644367754e-02, 6.684705615e-03, 8.674184978e-02, -9.404018521e-03, -1.433958262e-01, 2.846550941e-02, -8.765932173e-02, -1.460439414e-01, 1.188688725e-01, 1.155680865e-01, 1.584181935e-01, -1.630502641e-01, 1.283432394e-01, 6.249137223e-02, -1.573085040e-01, -2.976918221e-02, -1.279351711e-01, 1.304769665e-01, 5.375051498e-02, -7.384085655e-02, -1.125113592e-01, -1.276997030e-01, 1.328083426e-01, 1.831543446e-02, 1.395752579e-01, -6.107612699e-02, -7.433275878e-02, 7.505440712e-02, 6.965689361e-02, 1.253929287e-01, 1.432412416e-01, 1.036192924e-01, -6.067752838e-02, 1.596895903e-01, -9.794354439e-02, 3.226928413e-02, -1.383516043e-01, 6.793093681e-02, 9.524573386e-02, 9.784813225e-02, 7.835011184e-02, -5.142267793e-02, -1.129611731e-01, -1.491266191e-01, 9.375266731e-02, -8.904580772e-02, 9.767651558e-03, -1.202514172e-01, -4.271507263e-02, 1.648911983e-01, 6.635804474e-02, -7.600434870e-02, 1.418276578e-01, 1.474268585e-01, 5.441682041e-02, -3.671912849e-02, 1.216709167e-01, -1.425668448e-01, -8.203272521e-02, 3.662292659e-02, 1.113806218e-01, 1.413889676e-01, 1.420429498e-01, 4.673457146e-02, 9.137435257e-02, 8.386895061e-03, 1.120239645e-01, -1.192209348e-01, 9.218664467e-02, -4.770442098e-02, 3.613965213e-02, -1.013223380e-01, 8.674396574e-02, -2.745985985e-03, 7.781620324e-02, 9.847088158e-02, 6.045298278e-02, -1.465762854e-01, 7.799267769e-03, -8.712098002e-03, -2.021431923e-03, -1.207101345e-02, -1.176605672e-01, -4.048185050e-02, 6.064729393e-02, -1.339725256e-01, 6.395936012e-03, -4.890005291e-02, -1.852667332e-02, -9.623007476e-02, 1.359151751e-01, -1.412186325e-01, -2.461771667e-02, 1.922094822e-02, -3.960566223e-02, -1.111531258e-02, -1.141266078e-01, 1.056065112e-01, -4.031822085e-03, 1.626356989e-01, 1.309483498e-01, -1.554335058e-01, -5.589731783e-02, -8.720835298e-02, 1.034075767e-01, -1.489199847e-01, 3.587655723e-02, -1.308504045e-01, 4.168979824e-02, -1.464112699e-01, -1.062122583e-01, 1.183734685e-01, -4.964777082e-02, -1.281502247e-01, 7.871344686e-03, -6.294183433e-02, 5.557215214e-02, 1.245094091e-01, 1.310494095e-01, 4.990887642e-02, -1.447245479e-03, 3.911705315e-02, 8.627529442e-02, 7.025361061e-02, -1.647587121e-02, 6.232333183e-02, -2.948892117e-02, -3.300304711e-02, 7.005429268e-02, 7.435774803e-02, 3.946371377e-02, -6.938934326e-02, -5.011312664e-02, 1.234674454e-02, 3.685995936e-03, 7.921747863e-02, 7.497966290e-02, 7.058019936e-02, -3.738968074e-02, -9.139414877e-02, -8.620455861e-03, -1.583417356e-01, -1.072167158e-01, -1.260747164e-01, -1.224314421e-01, 1.361799240e-02, -9.208238125e-02, 3.132760525e-02, -1.452641189e-01, 1.328426152e-01, 1.191499978e-01, 2.121889591e-02, 1.089205295e-01, -1.607720852e-01, 5.864877999e-02, -1.114457473e-01, 1.640026122e-01, 6.156837940e-02, -1.081748009e-01, -4.457788169e-02, 1.663307101e-01, 7.418926060e-02, 2.099156380e-02, -4.669468105e-02, -8.143969625e-02, 6.290221214e-02, 3.900974989e-04, -8.379523456e-02, 1.619496793e-01, -1.158929691e-01, 3.706963360e-02, 9.137003124e-02, -1.177360266e-01, -8.743147552e-02, -8.223366737e-02, 1.318497211e-01, -6.417354196e-02, 1.061731726e-01, 1.167972535e-01, 1.622071415e-01, -6.846301258e-02, -9.183466434e-02, 1.346928626e-01, -1.256446540e-01, 5.226691067e-02, -1.534633338e-02, -5.089255422e-02, 1.025146395e-01, -6.858050823e-02, 1.380309314e-01, 1.506188363e-01, 5.906195939e-02, 9.893609583e-02, 7.897154987e-02, -5.293771625e-03, 1.048050374e-01, 4.713635147e-02, 6.082579494e-03, -6.844238937e-02, -5.040856451e-02, 1.388612241e-01, -1.333618611e-01, -1.585681736e-02, -1.595266759e-01, -7.301895320e-02, 1.128026396e-01, -1.905083656e-02, 2.519385517e-02, 1.590477377e-01, 1.286021620e-01, -1.835401356e-02, 1.633840352e-01, -1.326762438e-01, 1.068548858e-02, -1.276543140e-01, -1.554553509e-01, -4.015493393e-02, 2.855999768e-02, -1.085381508e-01, -1.032832861e-01, 5.871491134e-02, -4.564738274e-02, -2.368390560e-02, 8.786429465e-02, -8.491039276e-03, 2.647149563e-02, -9.387306869e-02, -1.348372698e-01, -1.078518629e-01, -1.480806768e-01, -1.401861608e-01, -3.542225063e-02, -6.463281810e-02, -6.658820808e-02, -1.023626328e-02, 5.431249738e-03, -1.614441574e-01, 3.278715909e-02, 1.037060767e-01, -7.729645818e-02, -6.268521398e-02, -1.620945632e-01, -1.161663234e-02, 9.340454638e-02, 9.658391774e-02, -1.331329346e-03, 6.722211838e-02, 4.366119206e-02, -6.526660919e-02, 1.266162544e-01, 7.703232765e-02, 1.038892418e-01, -3.456191719e-02, -7.659220695e-02, -3.411786258e-02, -4.640722275e-02, 7.525408268e-02, 1.309335381e-01, 6.154727936e-02, -3.828001022e-02, -4.148931801e-02, -8.135843277e-02, -1.492935866e-01, 3.972840309e-02, -3.744423389e-02, -5.010144413e-02, -6.487759203e-02, 1.273415536e-01, 1.185605973e-01, 7.883393764e-02, 1.384512931e-01, 9.302164614e-02, 5.122525990e-02, 9.285330772e-03, -1.491961479e-01, 2.132749557e-02, 1.486106068e-01, -2.757385373e-03, 8.268789947e-02, -5.601453781e-02, 4.460644722e-02, -1.115643978e-02, -5.586579442e-03, -9.748788923e-02, -1.156663150e-01, -1.403168142e-01, -7.191936672e-02, 1.606171578e-01, -1.481841058e-01, -1.536081284e-01, 1.525944620e-01, -1.289841384e-01, -1.146236658e-01, 5.662889779e-02, -3.380005062e-02, -4.986123741e-02, -1.525635719e-01, -1.803123951e-02, 3.393177688e-02, 1.233094484e-01, -4.374909401e-02, 1.303898841e-01, 3.094859421e-02, -3.985837102e-03, -4.812403768e-02, -1.062792987e-01, 3.097012639e-03, -5.237905681e-02, 5.673377216e-02, -1.052016839e-01, -3.248007596e-02, 3.864340484e-02, -2.723984420e-02, 7.696513832e-02, -1.022266150e-01, 5.077965558e-02, -1.516343355e-01, 1.505501568e-02, -1.488101482e-01, 2.194900811e-02, -5.067165941e-02, 8.094556630e-02, -6.926386058e-02, 1.534415632e-01, 8.137309551e-02, 4.116404057e-02, -3.003053367e-02, -1.537434757e-01, 3.393141925e-02, -8.006612957e-02, -9.168612957e-02, -1.251877546e-01, -5.791430175e-02, 3.989756107e-02, 1.204376966e-01, -9.448532760e-02, 1.550373286e-01, 1.195122153e-01, -1.200921163e-01, -1.140941828e-01, 3.937406838e-02, -5.528791994e-02, 5.693753064e-02, -8.687984943e-02, 8.513148129e-02, 1.380928904e-01, -6.132638454e-02, -9.326633066e-02, 5.643682182e-02, -5.894868076e-02, 6.356029212e-02, -1.349918544e-01, -8.499729633e-02, 4.721999168e-02, 1.124890149e-02, 6.547994912e-02, -1.626963913e-02, -5.630016327e-03, -1.490906924e-01, 9.627993405e-02, 1.680271327e-02, -8.046575636e-02, -6.418836117e-02, -1.055847034e-01, -3.720685840e-03, 1.080549210e-01, 1.154769808e-01, 4.097004235e-02, -4.236058891e-02, 8.551642299e-03, 2.719385922e-02, -5.524861813e-02, -5.434954166e-02, -1.595713347e-01, -7.046505809e-03, -8.781345934e-02, 3.180189431e-02, 2.073884010e-02, -1.452896595e-01, -7.111033052e-02, -2.498655021e-02, 1.201315224e-02, 1.357826144e-01, 2.026751637e-03, 1.337714344e-01, 7.529906929e-02, -1.137640476e-01, -7.383732498e-02, -1.651159972e-01, 1.262543350e-01, -1.467675418e-01, -1.308527440e-01, 7.061207294e-02, 7.618264854e-02, 4.717445374e-02, -9.596717358e-02, -4.421635717e-02, -1.142172813e-01, -1.186106652e-01, -1.061274260e-01, 9.945435822e-02, -2.461695671e-02, -1.137350425e-01, 4.295468330e-02, -1.871101558e-02, 2.197818458e-02, 1.498245150e-01, -1.612594575e-01, 1.336354166e-01, -9.905668348e-02, -1.344337165e-01, -7.737462223e-02, -7.725942135e-02, 5.845439434e-02, -9.877352417e-02, 9.400774539e-02, 6.504134834e-02, 1.404252499e-01, -6.706027687e-02, 1.373650283e-01, 9.927268326e-02, -8.766286075e-02, 1.332008392e-01, -1.444033831e-01, 1.525799483e-01, 5.060434341e-02, 1.600310206e-03, 1.325106174e-01, -9.297601879e-02, 7.216496766e-02, -1.249423027e-01, 2.857120335e-02, -2.795095742e-02, 4.637007415e-02, 7.420659065e-02, 3.246049583e-02, 3.448911011e-02, -1.411800086e-02, 8.499674499e-02, -8.964964002e-02, -1.038721800e-01, 4.698686302e-02, 4.455491900e-03, -1.604939699e-01, -6.651763618e-02, 9.638138115e-02, 8.869366348e-02, -8.859555423e-02, -2.184593678e-02, 9.128613770e-02, -1.758909225e-02, -3.969745338e-02, 1.858592033e-02, 1.090400666e-01, -6.409605592e-02, -1.217325181e-01, 3.366927803e-02, 7.163965702e-02, 1.480370909e-01, 9.273321927e-02, 4.335196316e-02, -9.045116603e-02, -1.949536800e-02, 1.629110724e-01, -1.573701352e-01, 1.420473307e-01, -1.658267677e-01, -6.123590469e-02, 1.462203413e-01, 1.530468911e-01, -6.903414428e-02, -8.912086487e-03, 5.203537643e-02, -2.859027684e-02, 6.117586792e-02, -8.051621914e-02, 5.759084225e-02, -1.338624209e-01, -8.291642368e-02, -4.996049404e-02, -8.837580681e-03, -2.418904006e-02, -1.284200400e-01, 1.256996542e-01, -1.421138048e-01, 4.842309654e-02, -4.885812849e-02, -1.169168949e-02, 4.645049572e-02, -1.372053623e-01, -1.143929586e-01, -1.506330967e-01, 6.937019527e-02, 6.734792888e-02, 1.250863820e-01, -5.608484149e-03, 3.798656166e-02, 1.020456702e-01, 5.983114243e-04, 8.685137331e-02, -1.272670478e-01, 1.217171401e-01, -3.124780953e-02, -3.932695091e-02, 1.305712909e-01, -5.987405777e-02, -5.989360809e-02, -1.456445456e-01, -6.255161762e-02, -1.639680117e-01, 2.359673381e-03, 5.260674655e-02, -6.605267525e-02, 1.562484652e-01, -1.215269566e-01, -7.212519646e-03, 9.266580641e-02, 4.399593174e-02, -1.190878153e-01, -1.568329334e-01, -1.364710331e-01, 8.613760769e-02, 1.379092485e-01, 1.414578110e-01, 4.485373199e-02, -1.146564931e-01, -1.518907994e-01, -1.602052897e-01, 1.172175854e-01, 1.252932996e-01, 4.631154239e-02, -1.310494393e-01, 2.863319218e-02, 1.175662726e-01, 1.497789770e-01, 7.521839440e-02, -1.603400707e-01, -2.119362354e-02, -4.434370995e-02, -1.034472436e-01, -2.178752422e-02, 1.210904121e-02, 1.030481309e-01, -1.203688011e-01, -8.586108685e-02, -1.137704477e-01, -2.151846886e-03, -4.834552854e-02, 7.767514884e-02, -1.125082225e-01, -1.356339902e-01, -6.160160154e-02, 7.694430649e-02, -5.986380577e-02, 5.771505833e-02, -5.017109960e-02, -1.168449223e-02, -1.172756404e-01, 1.773174107e-02, 1.657751352e-01, -1.060873717e-01, -1.586208045e-01, -4.501935095e-02, -5.462773889e-02, 8.415056765e-02, -1.306402683e-01, 4.720254242e-02, -1.388617009e-01, -8.977182955e-02, -1.415354908e-01, -1.627252102e-01, 7.370619476e-02, -2.488856018e-02, -8.001160622e-02, 4.341717064e-02, -1.530164182e-01, -4.850165546e-02, 1.053671092e-01, 1.638172120e-01, -6.569012254e-02, 1.321177632e-01, -1.153454781e-01, -1.223377436e-01, -1.461272687e-01, 7.739138603e-02, 2.497033775e-02, 1.368315667e-01, -1.239964962e-01, 1.626106948e-01, 6.005887687e-02, 5.020880699e-02, -3.872990608e-02, -9.849667549e-02, -2.030380070e-02, 1.847362518e-02, 4.037313163e-02, 8.408288658e-02, 1.956179738e-03, 3.131397069e-02, 1.238660961e-01, -1.148390770e-02, -1.166015863e-01, -1.286287308e-01, -6.985390186e-02, -7.000446320e-02, -1.567873657e-01, -1.520672292e-01, 1.284020096e-01, 1.448214054e-02, -5.816161633e-02, -5.774935335e-02, -9.794541448e-02, 1.627959162e-01, 5.676186085e-02, 1.210618764e-01, -5.347609520e-02, -6.086190790e-02, 8.588291705e-02, 1.617726535e-01, 2.293388546e-02, 1.457663924e-01, -2.816645801e-02, 1.501238495e-01, 6.299924850e-02, -1.042158902e-02, 9.139205515e-02, -5.306653678e-02, 1.182344407e-01, -1.486802995e-01, -1.103627309e-01, 1.568271369e-01, 1.102231294e-01, 1.647265702e-01, 6.152074039e-02, -3.802804649e-02, -8.008222282e-02, 1.330780238e-01, 1.504890472e-01, 1.554767340e-01, -1.447221488e-01, -1.796980202e-02, 5.949541926e-03, 7.349769771e-02, -9.696200490e-03, 1.181056648e-01, 1.557281762e-01, -1.345417947e-01, -5.099046230e-02, -3.928864002e-02, 1.176477820e-01, 1.590868682e-01, 5.568921566e-02, -8.854898065e-02, -3.786754608e-02, 1.854991913e-02, -1.629015654e-01, 7.629688084e-02, -5.049475282e-02, 4.782509804e-02, 2.205248177e-02, 7.399944961e-02, 5.896504223e-02, 3.093270957e-02, 1.084507853e-01, 1.224391907e-01, 8.601160347e-02, -6.922769547e-02, 1.966595650e-03, -1.077139378e-02, 3.699095547e-02, 9.045283496e-02, 2.849765122e-02, 1.635026932e-02, -1.473267972e-01, -3.952915967e-02, 1.536470205e-01, 1.381333619e-01, 1.655549258e-01, 6.604507565e-03, 7.339641452e-03, 1.172079593e-01, -5.247537792e-02, -1.977849007e-02, -1.216508150e-01, 1.403405815e-01, 1.103648096e-01, 1.350672394e-01, -1.466415823e-01, -1.086533070e-01, 1.263535023e-02, 1.198856384e-01, -1.537135094e-01, -1.195802689e-01, -2.680961788e-02, -5.443008989e-02, -9.234265983e-02, 4.408195615e-03, 7.525078952e-02, 1.036199778e-01, -1.255975962e-01, 1.309650689e-01, 9.456916153e-02, 1.464252174e-02, 4.839137197e-03, 1.260008961e-01, -1.250746250e-01, 6.290242076e-03, -1.512351930e-01, 5.728487670e-02, -1.172870398e-01, 5.048322678e-02, -4.865384102e-02, -6.033845991e-02, 1.405417174e-01, -7.384851575e-03, 7.042391598e-02, -4.353865236e-02, -1.481829584e-01, 1.035735756e-01, -1.214039326e-01, 1.025225669e-01, -1.767699420e-02, -1.590420455e-01, 1.064991951e-02, 9.571422637e-02, -7.049667835e-02, -1.599476039e-01, -1.335034072e-01, -1.473259181e-01, -2.862544358e-02, 1.528447121e-01, -8.668705076e-02, 7.263751328e-02, 1.329074651e-01, 1.659194678e-01, 1.332478225e-02, 1.064305007e-02, 6.966276467e-02, 8.860863745e-02, -8.575018495e-02, -2.717845142e-02, 1.292450577e-01, 1.300327927e-01, -1.470421553e-01, -1.123404950e-01, -3.486871719e-04, -5.427794158e-02, 1.657850891e-01, 1.174771935e-01, -1.644722670e-01, 1.312791258e-01, -7.463574409e-02, 1.305541545e-01, 3.192953765e-02, 9.337811172e-02, 8.770312369e-02, 5.166275799e-02, -3.929212689e-03, 1.023306996e-01, -1.603500843e-01, -1.296134442e-01};
    constexpr std::array<Scalar, 8> convBias_2 = {1.180086137e-23, 2.944837954e-23, 7.223672673e-24, -1.107980089e-24, -1.316796679e-23, -6.903618393e-24, 1.091459665e-24, -6.028278316e-25};

    // Layer 3: Conv2D
    constexpr std::array<Scalar, 72> convKernel_3 = {1.609909236e-01, 1.482264698e-01, 8.987963200e-03, -9.717857838e-02, -3.018189967e-02, -8.649110794e-02, 3.872781992e-02, 2.377699614e-01, 1.785220206e-01, 1.074936986e-01, -1.413354874e-01, -7.724949718e-02, 1.762902141e-01, 2.478232384e-01, 4.712432623e-02, -1.369320452e-01, -8.543483913e-02, -2.474120855e-01, -1.973521113e-01, 1.945655644e-01, 1.763495803e-01, 1.209622025e-01, 1.708049774e-01, 1.155493855e-01, 1.272249818e-01, 1.386809945e-01, 2.321112156e-01, -2.620048523e-01, 1.922689378e-01, 2.534623146e-01, -1.489585042e-01, 3.954419494e-02, 2.200443447e-01, 2.437646985e-01, -1.508861780e-03, 2.504708767e-01, 2.071368992e-01, 1.534110010e-01, 2.148601413e-02, -2.510704696e-01, -5.962771177e-02, -6.253063679e-03, 2.365541458e-02, -2.682713270e-01, -1.073769033e-01, 6.551778316e-02, 8.445242047e-02, -1.692772210e-01, -8.431601524e-02, -7.057966292e-02, -4.801121354e-02, 1.593162715e-01, 1.928866804e-01, 2.587742805e-01, -7.405351102e-02, -9.209962189e-02, 1.906347573e-01, -1.924508214e-01, -2.357810736e-03, -3.376379609e-02, -2.379347980e-01, 2.378356457e-02, 2.171244621e-01, -1.327392757e-01, -9.365350008e-03, -1.081436276e-01, 2.708370090e-01, -2.050781250e-02, -1.482713819e-01, 4.728731513e-02, -1.080335230e-01, 2.412360311e-01};
    constexpr std::array<Scalar, 1> convBias_3 = {2.264205136e-24};


//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 


    auto relu = +[](Scalar& output, Scalar input, Scalar alpha) noexcept {
        output = input > 0 ? input : 0;
    };

    auto linear = +[](Scalar& output, Scalar input, Scalar alpha) noexcept {
        output = input;
    };


//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 


    // Conv2D, layer 1
    static std::array<Scalar, (96 * 96 * 16)> layer_1_output;
    Conv2D<Scalar, 16, 96, 96>(
        layer_1_output.data(), model_input.data(),
        convKernel_1.data(), convBias_1.data(),
        1, 96, 96,
        3, 3, 1, 1, 1, 1,
        relu, 0.0);

    // Conv2D, layer 2
    static std::array<Scalar, (96 * 96 * 8)> layer_2_output;
    Conv2D<Scalar, 8, 96, 96>(
        layer_2_output.data(), layer_1_output.data(),
        convKernel_2.data(), convBias_2.data(),
        16, 96, 96,
        3, 3, 1, 1, 1, 1,
        relu, 0.0);

    // Conv2D, layer 3
    static std::array<Scalar, (96 * 96 * 1)> layer_3_output;
    Conv2D<Scalar, 1, 96, 96>(
        layer_3_output.data(), layer_2_output.data(),
        convKernel_3.data(), convBias_3.data(),
        8, 96, 96,
        3, 3, 1, 1, 1, 1,
        linear, 0.0);

    // Conv2D, layer 4
    static std::array<Scalar, 9216> layer_4_output;
    Reshape<Scalar, 9216>(
        layer_4_output.data(), layer_3_output.data());

    // Final output
    static std::array<std::array<Scalar, 96>, 96> model_output;
    for(int i = 0; i < 96; i++) {
        for(int j = 0; j < 96; j++) {
            model_output[i][j] = layer_4_output[i * 96 + j];
        }
    }

    return model_output;
}
